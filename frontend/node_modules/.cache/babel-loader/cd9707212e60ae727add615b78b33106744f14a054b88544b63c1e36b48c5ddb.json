{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\trade\\\\frontend\\\\src\\\\hooks\\\\useChat.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport { chatService } from '../services/api';\n\n// 聊天上下文类型定义\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\n\n// 聊天提供者组件\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const queryClient = useQueryClient();\n  const [currentChat, setCurrentChat] = useState(null);\n\n  // WebSocket连接状态\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 获取未读消息数量\n  const {\n    data: unreadCountData\n  } = useQuery({\n    queryKey: ['unreadMessages'],\n    queryFn: () => chatService.getUnreadCount(),\n    refetchInterval: 30000 // 每30秒刷新一次\n  });\n\n  // 获取当前聊天消息（分页加载）\n  const {\n    data: messagesData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error\n  } = useInfiniteQuery({\n    queryKey: ['chatMessages', currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId],\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      if (!(currentChat !== null && currentChat !== void 0 && currentChat.orderId)) {\n        throw new Error('No active chat');\n      }\n      return chatService.getChatMessages(currentChat.orderId);\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) => {\n      var _lastPage$data;\n      // 这里需要根据实际API响应结构调整\n      const totalMessages = ((_lastPage$data = lastPage.data) === null || _lastPage$data === void 0 ? void 0 : _lastPage$data.length) || 0;\n      const loadedMessages = allPages.reduce((acc, page) => {\n        var _page$data;\n        return acc + (((_page$data = page.data) === null || _page$data === void 0 ? void 0 : _page$data.length) || 0);\n      }, 0);\n\n      // 假设每页20条消息，如果还有更多则返回下一页\n      if (totalMessages === 20 && loadedMessages < 100) {\n        // 假设最多100条\n        return allPages.length + 1;\n      }\n      return undefined;\n    },\n    enabled: !!(currentChat !== null && currentChat !== void 0 && currentChat.orderId),\n    staleTime: 5 * 60 * 1000 // 5分钟\n  });\n\n  // 发送消息mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: data => chatService.sendMessage({\n      orderId: data.orderId,\n      receiverId: data.receiverId,\n      message: data.message,\n      type: data.type\n    }),\n    onSuccess: () => {\n      // 刷新当前聊天消息\n      queryClient.invalidateQueries({\n        queryKey: ['chatMessages', currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId]\n      });\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({\n        queryKey: ['unreadMessages']\n      });\n    }\n  });\n\n  // 标记消息已读mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: messageId => chatService.markAsRead(messageId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['unreadMessages']\n      });\n    }\n  });\n\n  // WebSocket连接和消息监听\n  useEffect(() => {\n    if (!(currentChat !== null && currentChat !== void 0 && currentChat.orderId)) return;\n\n    // 创建WebSocket连接\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:3001'}/chat/${currentChat.orderId}`;\n    const ws = new WebSocket(wsUrl);\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket连接已建立');\n    };\n    ws.onmessage = event => {\n      try {\n        const message = JSON.parse(event.data);\n        // 添加新消息到缓存\n        queryClient.setQueryData(['chatMessages', currentChat.orderId], oldData => {\n          if (!oldData) return oldData;\n          const newPages = oldData.pages.map(page => ({\n            ...page,\n            data: [...page.data, message]\n          }));\n          return {\n            ...oldData,\n            pages: newPages\n          };\n        });\n\n        // 如果是接收到的消息，标记为已读\n        if (message.senderId !== currentChat.userId) {\n          setTimeout(() => {\n            markMessageAsRead(message.id);\n          }, 1000);\n        }\n      } catch (error) {\n        console.error('解析消息失败:', error);\n      }\n    };\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket连接已关闭');\n    };\n    ws.onerror = error => {\n      console.error('WebSocket错误:', error);\n    };\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId, queryClient]);\n\n  // 发送消息函数\n  const sendMessage = async (content, type = 'text') => {\n    if (!(currentChat !== null && currentChat !== void 0 && currentChat.orderId) || !(currentChat !== null && currentChat !== void 0 && currentChat.userId)) {\n      throw new Error('No active chat');\n    }\n    try {\n      await sendMessageMutation.mutateAsync({\n        orderId: currentChat.orderId,\n        receiverId: currentChat.userId,\n        message: content,\n        type\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  };\n\n  // 加载更多消息\n  const loadMoreMessages = () => {\n    if (hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  // 标记消息已读\n  const markMessageAsRead = async messageId => {\n    try {\n      await markAsReadMutation.mutateAsync(messageId);\n    } catch (error) {\n      console.error('标记消息已读失败:', error);\n    }\n  };\n\n  // 获取所有消息\n  const messages = (messagesData === null || messagesData === void 0 ? void 0 : messagesData.pages.flatMap(page => page.data || [])) || [];\n  const value = {\n    currentChat,\n    messages,\n    unreadCount: (unreadCountData === null || unreadCountData === void 0 ? void 0 : unreadCountData.data) || 0,\n    sendMessage,\n    loadMoreMessages,\n    setCurrentChat,\n    markMessageAsRead,\n    hasMoreMessages: hasNextPage || false,\n    isLoading: isLoading || sendMessageMutation.isPending,\n    error: error\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 222,\n    columnNumber: 5\n  }, this);\n};\n\n// 使用聊天hook\n_s(ChatProvider, \"HbdWwXOX/+C9IkYdzKotlKqCau4=\", false, function () {\n  return [useQueryClient, useQuery, useInfiniteQuery, useMutation, useMutation];\n});\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat必须在ChatProvider中使用');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","useInfiniteQuery","chatService","jsxDEV","_jsxDEV","ChatContext","undefined","ChatProvider","children","_s","queryClient","currentChat","setCurrentChat","isConnected","setIsConnected","data","unreadCountData","queryKey","queryFn","getUnreadCount","refetchInterval","messagesData","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","error","orderId","pageParam","Error","getChatMessages","initialPageParam","getNextPageParam","lastPage","allPages","_lastPage$data","totalMessages","length","loadedMessages","reduce","acc","page","_page$data","enabled","staleTime","sendMessageMutation","mutationFn","sendMessage","receiverId","message","type","onSuccess","invalidateQueries","markAsReadMutation","messageId","markAsRead","wsUrl","process","env","REACT_APP_WS_URL","ws","WebSocket","onopen","console","log","onmessage","event","JSON","parse","setQueryData","oldData","newPages","pages","map","senderId","userId","setTimeout","markMessageAsRead","id","onclose","onerror","readyState","OPEN","close","content","mutateAsync","loadMoreMessages","messages","flatMap","value","unreadCount","hasMoreMessages","isPending","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","$RefreshReg$"],"sources":["D:/project/trade/frontend/src/hooks/useChat.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport { ChatMessage, CreateChatMessageRequest } from '../types';\nimport { chatService } from '../services/api';\n\n// 聊天上下文类型定义\ninterface ChatContextType {\n  // 当前聊天对话\n  currentChat: {\n    orderId: string;\n    userId: string;\n    userName: string;\n  } | null;\n  // 消息列表\n  messages: ChatMessage[];\n  // 未读消息数量\n  unreadCount: number;\n  // 发送消息\n  sendMessage: (content: string, type?: 'text' | 'image' | 'location') => Promise<void>;\n  // 加载更多消息\n  loadMoreMessages: () => void;\n  // 设置当前聊天\n  setCurrentChat: (chat: { orderId: string; userId: string; userName: string } | null) => void;\n  // 标记消息已读\n  markMessageAsRead: (messageId: string) => Promise<void>;\n  // 是否有更多消息\n  hasMoreMessages: boolean;\n  // 加载状态\n  isLoading: boolean;\n  // 错误信息\n  error: Error | null;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\n// 聊天提供者组件\nexport const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [currentChat, setCurrentChat] = useState<{ orderId: string; userId: string; userName: string } | null>(null);\n\n  // WebSocket连接状态\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 获取未读消息数量\n  const { data: unreadCountData } = useQuery({\n    queryKey: ['unreadMessages'],\n    queryFn: () => chatService.getUnreadCount(),\n    refetchInterval: 30000, // 每30秒刷新一次\n  });\n\n  // 获取当前聊天消息（分页加载）\n  const {\n    data: messagesData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error,\n  } = useInfiniteQuery({\n    queryKey: ['chatMessages', currentChat?.orderId],\n    queryFn: ({ pageParam = 1 }) => {\n      if (!currentChat?.orderId) {\n        throw new Error('No active chat');\n      }\n      return chatService.getChatMessages(currentChat.orderId);\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) => {\n      // 这里需要根据实际API响应结构调整\n      const totalMessages = lastPage.data?.length || 0;\n      const loadedMessages = allPages.reduce((acc, page) => acc + (page.data?.length || 0), 0);\n      \n      // 假设每页20条消息，如果还有更多则返回下一页\n      if (totalMessages === 20 && loadedMessages < 100) { // 假设最多100条\n        return allPages.length + 1;\n      }\n      return undefined;\n    },\n    enabled: !!currentChat?.orderId,\n    staleTime: 5 * 60 * 1000, // 5分钟\n  });\n\n  // 发送消息mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: {\n      orderId: string;\n      receiverId: string;\n      message: string;\n      type: 'text' | 'image' | 'location';\n    }) => chatService.sendMessage({\n      orderId: data.orderId,\n      receiverId: data.receiverId,\n      message: data.message,\n      type: data.type,\n    }),\n    onSuccess: () => {\n      // 刷新当前聊天消息\n      queryClient.invalidateQueries({ queryKey: ['chatMessages', currentChat?.orderId] });\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // 标记消息已读mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: (messageId: string) => chatService.markAsRead(messageId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // WebSocket连接和消息监听\n  useEffect(() => {\n    if (!currentChat?.orderId) return;\n\n    // 创建WebSocket连接\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:3001'}/chat/${currentChat.orderId}`;\n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket连接已建立');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        // 添加新消息到缓存\n        queryClient.setQueryData(['chatMessages', currentChat.orderId], (oldData: any) => {\n          if (!oldData) return oldData;\n          \n          const newPages = oldData.pages.map((page: any) => ({\n            ...page,\n            data: [...page.data, message]\n          }));\n          \n          return {\n            ...oldData,\n            pages: newPages,\n          };\n        });\n\n        // 如果是接收到的消息，标记为已读\n        if (message.senderId !== currentChat.userId) {\n          setTimeout(() => {\n            markMessageAsRead(message.id);\n          }, 1000);\n        }\n      } catch (error) {\n        console.error('解析消息失败:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket连接已关闭');\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket错误:', error);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [currentChat?.orderId, queryClient]);\n\n  // 发送消息函数\n  const sendMessage = async (content: string, type: 'text' | 'image' | 'location' = 'text') => {\n    if (!currentChat?.orderId || !currentChat?.userId) {\n      throw new Error('No active chat');\n    }\n\n    try {\n      await sendMessageMutation.mutateAsync({\n        orderId: currentChat.orderId,\n        receiverId: currentChat.userId,\n        message: content,\n        type,\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  };\n\n  // 加载更多消息\n  const loadMoreMessages = () => {\n    if (hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  // 标记消息已读\n  const markMessageAsRead = async (messageId: string) => {\n    try {\n      await markAsReadMutation.mutateAsync(messageId);\n    } catch (error) {\n      console.error('标记消息已读失败:', error);\n    }\n  };\n\n  // 获取所有消息\n  const messages = messagesData?.pages.flatMap(page => page.data || []) || [];\n\n  const value: ChatContextType = {\n    currentChat,\n    messages,\n    unreadCount: unreadCountData?.data || 0,\n    sendMessage,\n    loadMoreMessages,\n    setCurrentChat,\n    markMessageAsRead,\n    hasMoreMessages: hasNextPage || false,\n    isLoading: isLoading || sendMessageMutation.isPending,\n    error: error as Error | null,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\n// 使用聊天hook\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat必须在ChatProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}