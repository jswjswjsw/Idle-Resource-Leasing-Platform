{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\trade\\\\frontend\\\\src\\\\hooks\\\\useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { userService } from '../services/api';\n\n// 认证上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// 认证提供者组件\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 获取当前用户信息\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser\n  } = useQuery({\n    queryKey: ['currentUser'],\n    queryFn: () => userService.getCurrentUser(),\n    enabled: !!localStorage.getItem('token'),\n    retry: 1\n  });\n\n  // 登录mutation\n  const loginMutation = useMutation({\n    mutationFn: ({\n      email,\n      password\n    }) => userService.login({\n      email,\n      password\n    }),\n    onSuccess: data => {\n      if (data.success) {\n        setIsAuthenticated(true);\n        queryClient.invalidateQueries({\n          queryKey: ['currentUser']\n        });\n      }\n    }\n  });\n\n  // 注册mutation\n  const registerMutation = useMutation({\n    mutationFn: data => userService.register(data),\n    onSuccess: data => {\n      if (data.success) {\n        queryClient.invalidateQueries({\n          queryKey: ['currentUser']\n        });\n      }\n    }\n  });\n\n  // 更新用户信息mutation\n  const updateUserMutation = useMutation({\n    mutationFn: data => userService.updateUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['currentUser']\n      });\n    }\n  });\n\n  // 更新认证状态\n  useEffect(() => {\n    setIsAuthenticated(!!localStorage.getItem('token') && !!(userData !== null && userData !== void 0 && userData.data));\n  }, [userData]);\n\n  // 登录函数\n  const login = async (email, password) => {\n    try {\n      await loginMutation.mutateAsync({\n        email,\n        password\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 注册函数\n  const register = async data => {\n    try {\n      await registerMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = '/';\n  };\n\n  // 更新用户信息函数\n  const updateUser = async data => {\n    try {\n      await updateUserMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n  const value = {\n    user: (userData === null || userData === void 0 ? void 0 : userData.data) || null,\n    token: localStorage.getItem('token'),\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUser,\n    refetchUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 10\n  }, this);\n};\n\n// 使用认证hook\n_s(AuthProvider, \"t3/8ysVRqMStBZVPx3bUKi5gs/c=\", false, function () {\n  return [useQueryClient, useQuery, useMutation, useMutation, useMutation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth必须在AuthProvider中使用');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","userService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","queryClient","isAuthenticated","setIsAuthenticated","data","userData","isLoading","refetch","refetchUser","queryKey","queryFn","getCurrentUser","enabled","localStorage","getItem","retry","loginMutation","mutationFn","email","password","login","onSuccess","success","invalidateQueries","registerMutation","register","updateUserMutation","updateUser","mutateAsync","error","logout","removeItem","clear","window","location","href","value","user","token","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/project/trade/frontend/src/hooks/useAuth.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { User } from '../types';\nimport { userService } from '../services/api';\n\n// 认证上下文\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => Promise<void>;\n  logout: () => void;\n  updateUser: (data: Partial<User>) => Promise<void>;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// 认证提供者组件\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 获取当前用户信息\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser\n  } = useQuery({\n    queryKey: ['currentUser'],\n    queryFn: () => userService.getCurrentUser(),\n    enabled: !!localStorage.getItem('token'),\n    retry: 1,\n  });\n\n  // 登录mutation\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      userService.login({ email, password }),\n    onSuccess: (data) => {\n      if (data.success) {\n        setIsAuthenticated(true);\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 注册mutation\n  const registerMutation = useMutation({\n    mutationFn: (data: {\n      username: string;\n      email: string;\n      phone: string;\n      password: string;\n      confirmPassword: string;\n    }) => userService.register(data),\n    onSuccess: (data) => {\n      if (data.success) {\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 更新用户信息mutation\n  const updateUserMutation = useMutation({\n    mutationFn: (data: Partial<User>) => userService.updateUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n    },\n  });\n\n  // 更新认证状态\n  useEffect(() => {\n    setIsAuthenticated(!!localStorage.getItem('token') && !!userData?.data);\n  }, [userData]);\n\n  // 登录函数\n  const login = async (email: string, password: string) => {\n    try {\n      await loginMutation.mutateAsync({ email, password });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 注册函数\n  const register = async (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => {\n    try {\n      await registerMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = '/';\n  };\n\n  // 更新用户信息函数\n  const updateUser = async (data: Partial<User>) => {\n    try {\n      await updateUserMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    user: userData?.data || null,\n    token: localStorage.getItem('token'),\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUser,\n    refetchUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// 使用认证hook\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth必须在AuthProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}