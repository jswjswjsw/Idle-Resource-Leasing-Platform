{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nimport { notificationService } from '../services/api';\nimport { useAuth } from './useAuth';\n\n/**\n * 通知管理Hook\n * 提供通知列表管理、实时通知接收、未读数量统计等功能\n */\nexport const useNotification = () => {\n  _s();\n  // 通知状态管理\n  const [notifications, setNotifications] = useState([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [socket, setSocket] = useState(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0\n  });\n  const {\n    user,\n    token\n  } = useAuth();\n\n  /**\n   * 初始化WebSocket连接\n   */\n  const initializeSocket = useCallback(() => {\n    if (!token || !user) return;\n\n    // 创建Socket连接\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n\n    // 连接成功事件\n    newSocket.on('connect', () => {\n      console.log('通知Socket连接成功');\n    });\n\n    // 接收新通知\n    newSocket.on('new_notification', notification => {\n      // 添加到通知列表\n      setNotifications(prev => [notification, ...prev]);\n      // 更新未读数量\n      setUnreadCount(prev => prev + 1);\n      // 显示Toast提示\n      toast.success(notification.title, {\n        duration: 4000,\n        position: 'top-right'\n      });\n    });\n\n    // 接收未读数量更新\n    newSocket.on('unread_notifications', count => {\n      setUnreadCount(count);\n    });\n\n    // 接收通知列表\n    newSocket.on('notifications', data => {\n      if (data.pagination.page === 1) {\n        // 第一页，替换数据\n        setNotifications(data.data);\n      } else {\n        // 后续页，追加数据\n        setNotifications(prev => [...prev, ...data.data]);\n      }\n      setPagination(data.pagination);\n      setLoading(false);\n    });\n\n    // 错误处理\n    newSocket.on('error', error => {\n      console.error('通知Socket错误:', error);\n      toast.error(error.error || '通知服务连接失败');\n      setLoading(false);\n    });\n\n    // 连接断开事件\n    newSocket.on('disconnect', () => {\n      console.log('通知Socket连接断开');\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [token, user]);\n\n  /**\n   * 获取通知列表\n   */\n  const getNotifications = useCallback(async (page = 1, append = false) => {\n    if (!socket) return;\n    setLoading(true);\n    try {\n      // 通过Socket请求通知列表\n      socket.emit('get_notifications', {\n        page,\n        limit: pagination.limit\n      });\n    } catch (error) {\n      console.error('获取通知列表失败:', error);\n      toast.error('获取通知列表失败');\n      setLoading(false);\n    }\n  }, [socket, pagination.limit]);\n\n  /**\n   * 标记通知为已读\n   */\n  const markAsRead = useCallback(async notificationId => {\n    if (!socket) return;\n    try {\n      // 通过Socket标记已读\n      socket.emit('mark_notification_read', notificationId);\n\n      // 更新本地状态\n      setNotifications(prev => prev.map(notification => notification.id === notificationId ? {\n        ...notification,\n        read: true\n      } : notification));\n    } catch (error) {\n      console.error('标记通知已读失败:', error);\n      toast.error('标记通知已读失败');\n    }\n  }, [socket]);\n\n  /**\n   * 标记所有通知为已读\n   */\n  const markAllAsRead = useCallback(async () => {\n    if (!socket) return;\n    try {\n      // 通过Socket标记所有已读\n      socket.emit('mark_all_notifications_read');\n\n      // 更新本地状态\n      setNotifications(prev => prev.map(notification => ({\n        ...notification,\n        read: true\n      })));\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('标记所有通知已读失败:', error);\n      toast.error('标记所有通知已读失败');\n    }\n  }, [socket]);\n\n  /**\n   * 加载更多通知\n   */\n  const loadMore = useCallback(async () => {\n    if (pagination.page < pagination.totalPages && !loading) {\n      await getNotifications(pagination.page + 1, true);\n    }\n  }, [pagination.page, pagination.totalPages, loading, getNotifications]);\n\n  /**\n   * 刷新通知列表\n   */\n  const refresh = useCallback(async () => {\n    await getNotifications(1, false);\n  }, [getNotifications]);\n\n  /**\n   * 获取未读通知数量\n   */\n  const getUnreadCount = useCallback(async () => {\n    try {\n      const response = await notificationService.getUnreadCount();\n      if (response.success) {\n        setUnreadCount(response.data);\n      }\n    } catch (error) {\n      console.error('获取未读数量失败:', error);\n    }\n  }, []);\n\n  // 初始化Socket连接\n  useEffect(() => {\n    if (user && token) {\n      const cleanup = initializeSocket();\n      return cleanup;\n    }\n  }, [user, token, initializeSocket]);\n\n  // 组件挂载时获取初始数据\n  useEffect(() => {\n    if (socket) {\n      getNotifications(1);\n      getUnreadCount();\n    }\n  }, [socket, getNotifications, getUnreadCount]);\n\n  // 组件卸载时清理Socket连接\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n  return {\n    // 状态\n    notifications,\n    unreadCount,\n    loading,\n    pagination,\n    // 方法\n    getNotifications,\n    markAsRead,\n    markAllAsRead,\n    loadMore,\n    refresh,\n    // 计算属性\n    hasMore: pagination.page < pagination.totalPages,\n    isEmpty: notifications.length === 0 && !loading\n  };\n};\n_s(useNotification, \"Wx9SDr1EQsUBmBioddjLuo01WN8=\", false, function () {\n  return [useAuth];\n});\nexport default useNotification;","map":{"version":3,"names":["useState","useEffect","useCallback","io","toast","notificationService","useAuth","useNotification","_s","notifications","setNotifications","unreadCount","setUnreadCount","loading","setLoading","socket","setSocket","pagination","setPagination","page","limit","total","totalPages","user","token","initializeSocket","newSocket","process","env","REACT_APP_API_URL","auth","transports","on","console","log","notification","prev","success","title","duration","position","count","data","error","disconnect","getNotifications","append","emit","markAsRead","notificationId","map","id","read","markAllAsRead","loadMore","refresh","getUnreadCount","response","cleanup","hasMore","isEmpty","length"],"sources":["D:/project/trade/frontend/src/hooks/useNotification.tsx"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\nimport io from 'socket.io-client';\nimport type { Socket } from 'socket.io-client';\nimport { toast } from 'react-hot-toast';\nimport { notificationService } from '../services/api';\nimport { Notification } from '../types';\nimport { useAuth } from './useAuth';\n\n/**\n * 通知管理Hook\n * 提供通知列表管理、实时通知接收、未读数量统计等功能\n */\nexport const useNotification = () => {\n  // 通知状态管理\n  const [notifications, setNotifications] = useState<Notification[]>([]);\n  const [unreadCount, setUnreadCount] = useState(0);\n  const [loading, setLoading] = useState(false);\n  const [socket, setSocket] = useState<Socket | null>(null);\n  const [pagination, setPagination] = useState({\n    page: 1,\n    limit: 20,\n    total: 0,\n    totalPages: 0\n  });\n\n  const { user, token } = useAuth();\n\n  /**\n   * 初始化WebSocket连接\n   */\n  const initializeSocket = useCallback(() => {\n    if (!token || !user) return;\n\n    // 创建Socket连接\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:3001', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n\n    // 连接成功事件\n    newSocket.on('connect', () => {\n      console.log('通知Socket连接成功');\n    });\n\n    // 接收新通知\n    newSocket.on('new_notification', (notification: Notification) => {\n      // 添加到通知列表\n      setNotifications(prev => [notification, ...prev]);\n      // 更新未读数量\n      setUnreadCount(prev => prev + 1);\n      // 显示Toast提示\n      toast.success(notification.title, {\n        duration: 4000,\n        position: 'top-right'\n      });\n    });\n\n    // 接收未读数量更新\n    newSocket.on('unread_notifications', (count: number) => {\n      setUnreadCount(count);\n    });\n\n    // 接收通知列表\n    newSocket.on('notifications', (data: {\n      data: Notification[];\n      pagination: {\n        page: number;\n        limit: number;\n        total: number;\n        totalPages: number;\n      }\n    }) => {\n      if (data.pagination.page === 1) {\n        // 第一页，替换数据\n        setNotifications(data.data);\n      } else {\n        // 后续页，追加数据\n        setNotifications(prev => [...prev, ...data.data]);\n      }\n      setPagination(data.pagination);\n      setLoading(false);\n    });\n\n    // 错误处理\n    newSocket.on('error', (error: { type: string; error: string }) => {\n      console.error('通知Socket错误:', error);\n      toast.error(error.error || '通知服务连接失败');\n      setLoading(false);\n    });\n\n    // 连接断开事件\n    newSocket.on('disconnect', () => {\n      console.log('通知Socket连接断开');\n    });\n\n    setSocket(newSocket);\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [token, user]);\n\n  /**\n   * 获取通知列表\n   */\n  const getNotifications = useCallback(async (page: number = 1, append: boolean = false) => {\n    if (!socket) return;\n\n    setLoading(true);\n    \n    try {\n      // 通过Socket请求通知列表\n      socket.emit('get_notifications', {\n        page,\n        limit: pagination.limit\n      });\n    } catch (error) {\n      console.error('获取通知列表失败:', error);\n      toast.error('获取通知列表失败');\n      setLoading(false);\n    }\n  }, [socket, pagination.limit]);\n\n  /**\n   * 标记通知为已读\n   */\n  const markAsRead = useCallback(async (notificationId: string) => {\n    if (!socket) return;\n\n    try {\n      // 通过Socket标记已读\n      socket.emit('mark_notification_read', notificationId);\n      \n      // 更新本地状态\n      setNotifications(prev => \n        prev.map(notification => \n          notification.id === notificationId \n            ? { ...notification, read: true }\n            : notification\n        )\n      );\n    } catch (error) {\n      console.error('标记通知已读失败:', error);\n      toast.error('标记通知已读失败');\n    }\n  }, [socket]);\n\n  /**\n   * 标记所有通知为已读\n   */\n  const markAllAsRead = useCallback(async () => {\n    if (!socket) return;\n\n    try {\n      // 通过Socket标记所有已读\n      socket.emit('mark_all_notifications_read');\n      \n      // 更新本地状态\n      setNotifications(prev => \n        prev.map(notification => ({ ...notification, read: true }))\n      );\n      setUnreadCount(0);\n    } catch (error) {\n      console.error('标记所有通知已读失败:', error);\n      toast.error('标记所有通知已读失败');\n    }\n  }, [socket]);\n\n  /**\n   * 加载更多通知\n   */\n  const loadMore = useCallback(async () => {\n    if (pagination.page < pagination.totalPages && !loading) {\n      await getNotifications(pagination.page + 1, true);\n    }\n  }, [pagination.page, pagination.totalPages, loading, getNotifications]);\n\n  /**\n   * 刷新通知列表\n   */\n  const refresh = useCallback(async () => {\n    await getNotifications(1, false);\n  }, [getNotifications]);\n\n  /**\n   * 获取未读通知数量\n   */\n  const getUnreadCount = useCallback(async () => {\n    try {\n      const response = await notificationService.getUnreadCount();\n      if (response.success) {\n        setUnreadCount(response.data);\n      }\n    } catch (error) {\n      console.error('获取未读数量失败:', error);\n    }\n  }, []);\n\n  // 初始化Socket连接\n  useEffect(() => {\n    if (user && token) {\n      const cleanup = initializeSocket();\n      return cleanup;\n    }\n  }, [user, token, initializeSocket]);\n\n  // 组件挂载时获取初始数据\n  useEffect(() => {\n    if (socket) {\n      getNotifications(1);\n      getUnreadCount();\n    }\n  }, [socket, getNotifications, getUnreadCount]);\n\n  // 组件卸载时清理Socket连接\n  useEffect(() => {\n    return () => {\n      if (socket) {\n        socket.disconnect();\n      }\n    };\n  }, [socket]);\n\n  return {\n    // 状态\n    notifications,\n    unreadCount,\n    loading,\n    pagination,\n    \n    // 方法\n    getNotifications,\n    markAsRead,\n    markAllAsRead,\n    loadMore,\n    refresh,\n    \n    // 计算属性\n    hasMore: pagination.page < pagination.totalPages,\n    isEmpty: notifications.length === 0 && !loading\n  };\n};\n\nexport default useNotification;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}