{"ast":null,"code":"/**\n * 微信OAuth登录服务\n * 处理微信登录的前端逻辑，包括获取授权URL、处理回调等\n */\n\nimport { API_BASE_URL } from '../config/api';\n\n/**\n * 微信OAuth响应数据类型\n */\n\n/**\n * 微信用户信息类型\n */\n\n/**\n * 微信OAuth服务类\n */\nexport class WechatOAuthService {\n  /**\n   * 获取微信授权URL\n   * @param redirectUri 回调地址\n   * @returns Promise<string> 授权URL\n   */\n  static async getAuthUrl(redirectUri) {\n    try {\n      const params = new URLSearchParams();\n      if (redirectUri) {\n        params.append('redirectUri', redirectUri);\n      }\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/login?${params}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (!response.ok) {\n        throw new Error('获取授权URL失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '获取授权URL失败');\n      }\n\n      // 保存state到本地存储，用于验证回调\n      localStorage.setItem(this.STORAGE_KEY, data.data.state);\n      return data.data.authUrl;\n    } catch (error) {\n      console.error('获取微信授权URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 处理微信OAuth回调\n   * @param code 授权码\n   * @param state 状态参数\n   * @returns Promise<WechatOAuthResponse> 登录响应\n   */\n  static async handleCallback(code, state) {\n    try {\n      // 验证state参数\n      const storedState = localStorage.getItem(this.STORAGE_KEY);\n      if (!storedState || storedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/callback`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code,\n          state\n        })\n      });\n      if (!response.ok) {\n        throw new Error('微信登录失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '微信登录失败');\n      }\n\n      // 清除存储的state\n      localStorage.removeItem(this.STORAGE_KEY);\n      return data.data;\n    } catch (error) {\n      console.error('微信OAuth回调处理失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 移动端微信登录\n   * @param code 授权码\n   * @returns Promise<WechatOAuthResponse> 登录响应\n   */\n  static async mobileLogin(code) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/mobile`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code\n        })\n      });\n      if (!response.ok) {\n        throw new Error('微信登录失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '微信登录失败');\n      }\n      return data.data;\n    } catch (error) {\n      console.error('移动端微信登录失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 绑定微信账户\n   * @param code 授权码\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 绑定结果\n   */\n  static async bindWechat(code, accessToken) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/bind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        },\n        body: JSON.stringify({\n          code\n        })\n      });\n      if (!response.ok) {\n        throw new Error('绑定微信账户失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '绑定微信账户失败');\n      }\n      return data.data.success;\n    } catch (error) {\n      console.error('绑定微信账户失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 解绑微信账户\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 解绑结果\n   */\n  static async unbindWechat(accessToken) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/unbind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('解绑微信账户失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '解绑微信账户失败');\n      }\n      return data.data.success;\n    } catch (error) {\n      console.error('解绑微信账户失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取微信绑定状态\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 绑定状态\n   */\n  static async getBindStatus(accessToken) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`\n        }\n      });\n      if (!response.ok) {\n        throw new Error('获取绑定状态失败');\n      }\n      const data = await response.json();\n      if (!data.success) {\n        throw new Error(data.message || '获取绑定状态失败');\n      }\n      return data.data.isBound;\n    } catch (error) {\n      console.error('获取微信绑定状态失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检测是否为微信浏览器环境\n   * @returns boolean 是否为微信浏览器\n   */\n  static isWechatBrowser() {\n    const ua = navigator.userAgent.toLowerCase();\n    return ua.includes('micromessenger');\n  }\n\n  /**\n   * 检测是否为移动端\n   * @returns boolean 是否为移动端\n   */\n  static isMobile() {\n    const ua = navigator.userAgent.toLowerCase();\n    return /mobile|android|iphone|ipad|phone/i.test(ua);\n  }\n\n  /**\n   * 清除OAuth相关的本地存储\n   */\n  static clearStorage() {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\nWechatOAuthService.STORAGE_KEY = 'wechat_oauth_state';\nexport default WechatOAuthService;","map":{"version":3,"names":["API_BASE_URL","WechatOAuthService","getAuthUrl","redirectUri","params","URLSearchParams","append","response","fetch","method","headers","ok","Error","data","json","success","message","localStorage","setItem","STORAGE_KEY","state","authUrl","error","console","handleCallback","code","storedState","getItem","body","JSON","stringify","removeItem","mobileLogin","bindWechat","accessToken","unbindWechat","getBindStatus","isBound","isWechatBrowser","ua","navigator","userAgent","toLowerCase","includes","isMobile","test","clearStorage"],"sources":["D:/project/trade/frontend/src/services/wechatOAuthService.ts"],"sourcesContent":["/**\n * 微信OAuth登录服务\n * 处理微信登录的前端逻辑，包括获取授权URL、处理回调等\n */\n\nimport { API_BASE_URL } from '../config/api';\nimport { ApiResponse } from '../types/api';\n\n/**\n * 微信OAuth响应数据类型\n */\nexport interface WechatOAuthResponse {\n  user: {\n    id: string;\n    username: string;\n    email?: string;\n    phone?: string;\n    avatar?: string;\n    isOAuthUser: boolean;\n  };\n  token: string;\n  refreshToken: string;\n}\n\n/**\n * 微信用户信息类型\n */\nexport interface WechatUserInfo {\n  openid: string;\n  nickname: string;\n  headimgurl?: string;\n  unionid?: string;\n}\n\n/**\n * 微信OAuth服务类\n */\nexport class WechatOAuthService {\n  private static readonly STORAGE_KEY = 'wechat_oauth_state';\n\n  /**\n   * 获取微信授权URL\n   * @param redirectUri 回调地址\n   * @returns Promise<string> 授权URL\n   */\n  static async getAuthUrl(redirectUri?: string): Promise<string> {\n    try {\n      const params = new URLSearchParams();\n      if (redirectUri) {\n        params.append('redirectUri', redirectUri);\n      }\n      \n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/login?${params}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('获取授权URL失败');\n      }\n\n      const data: ApiResponse<{ authUrl: string; state: string }> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '获取授权URL失败');\n      }\n\n      // 保存state到本地存储，用于验证回调\n      localStorage.setItem(this.STORAGE_KEY, data.data.state);\n      \n      return data.data.authUrl;\n    } catch (error) {\n      console.error('获取微信授权URL失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 处理微信OAuth回调\n   * @param code 授权码\n   * @param state 状态参数\n   * @returns Promise<WechatOAuthResponse> 登录响应\n   */\n  static async handleCallback(code: string, state: string): Promise<WechatOAuthResponse> {\n    try {\n      // 验证state参数\n      const storedState = localStorage.getItem(this.STORAGE_KEY);\n      if (!storedState || storedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/callback`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code, state }),\n      });\n\n      if (!response.ok) {\n        throw new Error('微信登录失败');\n      }\n\n      const data: ApiResponse<WechatOAuthResponse> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '微信登录失败');\n      }\n\n      // 清除存储的state\n      localStorage.removeItem(this.STORAGE_KEY);\n      \n      return data.data;\n    } catch (error) {\n      console.error('微信OAuth回调处理失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 移动端微信登录\n   * @param code 授权码\n   * @returns Promise<WechatOAuthResponse> 登录响应\n   */\n  static async mobileLogin(code: string): Promise<WechatOAuthResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/mobile`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code }),\n      });\n\n      if (!response.ok) {\n        throw new Error('微信登录失败');\n      }\n\n      const data: ApiResponse<WechatOAuthResponse> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '微信登录失败');\n      }\n      \n      return data.data;\n    } catch (error) {\n      console.error('移动端微信登录失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 绑定微信账户\n   * @param code 授权码\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 绑定结果\n   */\n  static async bindWechat(code: string, accessToken: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/bind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n        },\n        body: JSON.stringify({ code }),\n      });\n\n      if (!response.ok) {\n        throw new Error('绑定微信账户失败');\n      }\n\n      const data: ApiResponse<{ success: boolean }> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '绑定微信账户失败');\n      }\n      \n      return data.data.success;\n    } catch (error) {\n      console.error('绑定微信账户失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 解绑微信账户\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 解绑结果\n   */\n  static async unbindWechat(accessToken: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/unbind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('解绑微信账户失败');\n      }\n\n      const data: ApiResponse<{ success: boolean }> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '解绑微信账户失败');\n      }\n      \n      return data.data.success;\n    } catch (error) {\n      console.error('解绑微信账户失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 获取微信绑定状态\n   * @param accessToken 用户访问令牌\n   * @returns Promise<boolean> 绑定状态\n   */\n  static async getBindStatus(accessToken: string): Promise<boolean> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/auth/wechat/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${accessToken}`,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error('获取绑定状态失败');\n      }\n\n      const data: ApiResponse<{ isBound: boolean; wechatInfo?: WechatUserInfo }> = await response.json();\n      \n      if (!data.success) {\n        throw new Error(data.message || '获取绑定状态失败');\n      }\n      \n      return data.data.isBound;\n    } catch (error) {\n      console.error('获取微信绑定状态失败:', error);\n      throw error;\n    }\n  }\n\n  /**\n   * 检测是否为微信浏览器环境\n   * @returns boolean 是否为微信浏览器\n   */\n  static isWechatBrowser(): boolean {\n    const ua = navigator.userAgent.toLowerCase();\n    return ua.includes('micromessenger');\n  }\n\n  /**\n   * 检测是否为移动端\n   * @returns boolean 是否为移动端\n   */\n  static isMobile(): boolean {\n    const ua = navigator.userAgent.toLowerCase();\n    return /mobile|android|iphone|ipad|phone/i.test(ua);\n  }\n\n  /**\n   * 清除OAuth相关的本地存储\n   */\n  static clearStorage(): void {\n    localStorage.removeItem(this.STORAGE_KEY);\n  }\n}\n\nexport default WechatOAuthService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}