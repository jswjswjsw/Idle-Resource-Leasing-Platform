{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\trade\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext } from 'react';\nimport { useNotification } from '../hooks/useNotification';\n\n/**\n * 通知上下文接口定义\n * 定义通知相关的状态和方法\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n/**\n * 通知上下文\n */\nconst NotificationContext = /*#__PURE__*/createContext(undefined);\n\n/**\n * 通知Provider组件属性接口\n */\n\n/**\n * 通知Provider组件\n * 为整个应用提供通知状态管理\n */\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s();\n  // 使用通知Hook获取所有通知相关功能\n  const notificationData = useNotification();\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: notificationData,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * 使用通知上下文的Hook\n * 提供类型安全的通知上下文访问\n * @returns 通知上下文数据\n * @throws 如果在NotificationProvider外部使用则抛出错误\n */\n_s(NotificationProvider, \"AmIKoDjWBTc0eZPF6wFk6hIMX0A=\", false, function () {\n  return [useNotification];\n});\n_c = NotificationProvider;\nexport const useNotificationContext = () => {\n  _s2();\n  const context = useContext(NotificationContext);\n  if (context === undefined) {\n    throw new Error('useNotificationContext必须在NotificationProvider内部使用');\n  }\n  return context;\n};\n_s2(useNotificationContext, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default NotificationContext;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useNotification","jsxDEV","_jsxDEV","NotificationContext","undefined","NotificationProvider","children","_s","notificationData","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useNotificationContext","_s2","context","Error","$RefreshReg$"],"sources":["D:/project/trade/frontend/src/contexts/NotificationContext.tsx"],"sourcesContent":["import React, { createContext, useContext, ReactNode } from 'react';\nimport { useNotification } from '../hooks/useNotification';\nimport { Notification } from '../types';\n\n/**\n * 通知上下文接口定义\n * 定义通知相关的状态和方法\n */\ninterface NotificationContextType {\n  // 状态\n  notifications: Notification[];\n  unreadCount: number;\n  loading: boolean;\n  pagination: {\n    page: number;\n    limit: number;\n    total: number;\n    totalPages: number;\n  };\n  \n  // 方法\n  getNotifications: (page?: number) => Promise<void>;\n  markAsRead: (notificationId: string) => Promise<void>;\n  markAllAsRead: () => Promise<void>;\n  loadMore: () => Promise<void>;\n  refresh: () => Promise<void>;\n  \n  // 计算属性\n  hasMore: boolean;\n  isEmpty: boolean;\n}\n\n/**\n * 通知上下文\n */\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\n\n/**\n * 通知Provider组件属性接口\n */\ninterface NotificationProviderProps {\n  children: ReactNode;\n}\n\n/**\n * 通知Provider组件\n * 为整个应用提供通知状态管理\n */\nexport const NotificationProvider: React.FC<NotificationProviderProps> = ({ children }) => {\n  // 使用通知Hook获取所有通知相关功能\n  const notificationData = useNotification();\n\n  return (\n    <NotificationContext.Provider value={notificationData}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n\n/**\n * 使用通知上下文的Hook\n * 提供类型安全的通知上下文访问\n * @returns 通知上下文数据\n * @throws 如果在NotificationProvider外部使用则抛出错误\n */\nexport const useNotificationContext = (): NotificationContextType => {\n  const context = useContext(NotificationContext);\n  \n  if (context === undefined) {\n    throw new Error('useNotificationContext必须在NotificationProvider内部使用');\n  }\n  \n  return context;\n};\n\nexport default NotificationContext;"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,QAAmB,OAAO;AACnE,SAASC,eAAe,QAAQ,0BAA0B;;AAG1D;AACA;AACA;AACA;AAHA,SAAAC,MAAA,IAAAC,OAAA;AA4BA;AACA;AACA;AACA,MAAMC,mBAAmB,gBAAGL,aAAa,CAAsCM,SAAS,CAAC;;AAEzF;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA,OAAO,MAAMC,oBAAyD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACzF;EACA,MAAMC,gBAAgB,GAAGR,eAAe,CAAC,CAAC;EAE1C,oBACEE,OAAA,CAACC,mBAAmB,CAACM,QAAQ;IAACC,KAAK,EAAEF,gBAAiB;IAAAF,QAAA,EACnDA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AALAP,EAAA,CAXaF,oBAAyD;EAAA,QAE3CL,eAAe;AAAA;AAAAe,EAAA,GAF7BV,oBAAyD;AAiBtE,OAAO,MAAMW,sBAAsB,GAAGA,CAAA,KAA+B;EAAAC,GAAA;EACnE,MAAMC,OAAO,GAAGnB,UAAU,CAACI,mBAAmB,CAAC;EAE/C,IAAIe,OAAO,KAAKd,SAAS,EAAE;IACzB,MAAM,IAAIe,KAAK,CAAC,mDAAmD,CAAC;EACtE;EAEA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CARWD,sBAAsB;AAUnC,eAAeb,mBAAmB;AAAC,IAAAY,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}