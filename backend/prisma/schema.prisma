// 闲置资源租赁平台数据库设计
// 支持用户认证、资源管理、订单交易、支付、聊天、通知等功能

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id                String    @id @default(cuid())
  email             String?   @unique
  phone             String?   @unique
  username          String    @unique
  password          String?   // OAuth用户可能没有密码
  avatar            String?
  realName          String?
  idCard            String?   // 身份证号（加密存储）
  status            UserStatus @default(ACTIVE)
  isVerified        Boolean   @default(false)
  emailVerified     Boolean   @default(false)
  phoneVerified     Boolean   @default(false)
  
  // OAuth信息
  githubId          String?   @unique
  wechatId          String?   @unique
  googleId          String?   @unique
  giteeId           String?   @unique
  
  // 个人信息
  bio               String?
  location          String?
  latitude          Float?
  longitude         Float?
  city              String?
  district          String?
  
  // 信用系统
  creditScore       Int       @default(100)
  totalRentals      Int       @default(0)
  totalEarnings     Decimal   @default(0) @db.Decimal(10, 2)
  
  // 时间戳
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLoginAt       DateTime?
  
  // 关联关系
  resources         Resource[]
  orders            Order[]    @relation("OrderCustomer")
  rentals           Order[]    @relation("OrderOwner")
  sentMessages      Message[]  @relation("MessageSender")
  receivedMessages  Message[]  @relation("MessageReceiver")
  notifications     Notification[]
  reviews           Review[]   @relation("ReviewAuthor")
  receivedReviews   Review[]   @relation("ReviewTarget")
  payments          Payment[]
  files             File[]
  chatRooms         ChatRoom[] @relation("ChatParticipants")
  
  @@map("users")
}

enum UserStatus {
  ACTIVE    // 正常
  SUSPENDED // 暂停
  BANNED    // 封禁
  DELETED   // 已删除
}

// 资源分类表
model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  icon        String?
  sort        Int        @default(0)
  isActive    Boolean    @default(true)
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  resources   Resource[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  @@map("categories")
}

// 资源表
model Resource {
  id            String         @id @default(cuid())
  title         String
  description   String         @db.Text
  categoryId    String
  category      Category       @relation(fields: [categoryId], references: [id])
  ownerId       String
  owner         User           @relation(fields: [ownerId], references: [id])
  
  // 资源详情
  images        String         @db.Text // JSON数组存储图片URL
  pricePerDay   Decimal        @db.Decimal(8, 2)
  pricePerHour  Decimal?       @db.Decimal(8, 2)
  deposit       Decimal        @db.Decimal(8, 2)
  minRentDays   Int            @default(1)
  maxRentDays   Int            @default(30)
  
  // 位置信息
  location      String
  latitude      Float
  longitude     Float
  city          String
  district      String
  address       String?
  
  // 状态管理
  status        ResourceStatus @default(AVAILABLE)
  condition     ResourceCondition @default(GOOD)
  isNegotiable  Boolean        @default(false)
  
  // 统计信息
  viewCount     Int            @default(0)
  favoriteCount Int            @default(0)
  orderCount    Int            @default(0)
  rating        Float?         @default(0)
  
  // 时间戳
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  publishedAt   DateTime?
  
  // 关联关系
  orders        Order[]
  reviews       Review[]
  favorites     Favorite[]
  
  @@map("resources")
}

enum ResourceStatus {
  DRAFT      // 草稿
  AVAILABLE  // 可租赁
  RENTED     // 已租出
  MAINTENANCE // 维护中
  OFFLINE    // 下线
}

enum ResourceCondition {
  NEW        // 全新
  EXCELLENT  // 九成新
  GOOD       // 八成新
  FAIR       // 七成新
  POOR       // 六成新以下
}

// 订单表
model Order {
  id              String      @id @default(cuid())
  orderNo         String      @unique // 订单号
  customerId      String
  customer        User        @relation("OrderCustomer", fields: [customerId], references: [id])
  ownerId         String
  owner           User        @relation("OrderOwner", fields: [ownerId], references: [id])
  resourceId      String
  resource        Resource    @relation(fields: [resourceId], references: [id])
  
  // 租赁信息
  startDate       DateTime
  endDate         DateTime
  actualStartDate DateTime?
  actualEndDate   DateTime?
  rentDays        Int
  
  // 价格信息
  pricePerDay     Decimal     @db.Decimal(8, 2)
  totalPrice      Decimal     @db.Decimal(10, 2)
  deposit         Decimal     @db.Decimal(8, 2)
  serviceFee      Decimal     @db.Decimal(8, 2) @default(0)
  finalAmount     Decimal     @db.Decimal(10, 2)
  
  // 订单状态
  status          OrderStatus @default(PENDING)
  cancelReason    String?
  refundAmount    Decimal?    @db.Decimal(10, 2)
  
  // 备注信息
  customerNote    String?
  ownerNote       String?
  adminNote       String?
  
  // 时间戳
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  confirmedAt     DateTime?
  completedAt     DateTime?
  cancelledAt     DateTime?
  
  // 关联关系
  payments        Payment[]
  reviews         Review[]
  chatRoom        ChatRoom?
  
  @@map("orders")
}

enum OrderStatus {
  PENDING      // 待确认
  CONFIRMED    // 已确认
  PAID         // 已支付
  IN_PROGRESS  // 进行中
  COMPLETED    // 已完成
  CANCELLED    // 已取消
  REFUNDED     // 已退款
  DISPUTED     // 有争议
}

// 支付表
model Payment {
  id              String        @id @default(cuid())
  paymentNo       String        @unique
  orderId         String
  order           Order         @relation(fields: [orderId], references: [id])
  userId          String
  user            User          @relation(fields: [userId], references: [id])
  
  // 支付信息
  amount          Decimal       @db.Decimal(10, 2)
  method          PaymentMethod
  channel         PaymentChannel
  type            PaymentType
  
  // 第三方支付信息
  thirdPartyId    String?       // 第三方支付流水号
  thirdPartyData  String?       @db.Text // 第三方返回数据
  
  // 状态管理
  status          PaymentStatus @default(PENDING)
  failReason      String?
  
  // 时间戳
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  paidAt          DateTime?
  
  @@map("payments")
}

enum PaymentMethod {
  ALIPAY    // 支付宝
  WECHAT    // 微信支付
  BANK_CARD // 银行卡
  BALANCE   // 余额
}

enum PaymentChannel {
  WEB       // 网页
  APP       // 手机APP
  H5        // 手机H5
  SCAN      // 扫码
}

enum PaymentType {
  ORDER     // 订单支付
  DEPOSIT   // 押金
  REFUND    // 退款
  WITHDRAW  // 提现
}

enum PaymentStatus {
  PENDING   // 待支付
  SUCCESS   // 支付成功
  FAILED    // 支付失败
  CANCELLED // 已取消
  REFUNDED  // 已退款
}

// 评价表
model Review {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  resourceId  String
  resource    Resource @relation(fields: [resourceId], references: [id])
  authorId    String
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  targetId    String
  target      User     @relation("ReviewTarget", fields: [targetId], references: [id])
  
  // 评价内容
  rating      Int      // 1-5星
  content     String   @db.Text
  images      String?  @db.Text // JSON数组存储图片
  
  // 评价类型
  type        ReviewType
  
  // 时间戳
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  @@unique([orderId, authorId, type])
  @@map("reviews")
}

enum ReviewType {
  RESOURCE  // 对资源的评价
  USER      // 对用户的评价
}

// 收藏表
model Favorite {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  resourceId String
  resource   Resource @relation(fields: [resourceId], references: [id])
  createdAt  DateTime @default(now())
  
  @@unique([userId, resourceId])
  @@map("favorites")
}

// 聊天室表
model ChatRoom {
  id        String    @id @default(cuid())
  orderId   String?   @unique
  order     Order?    @relation(fields: [orderId], references: [id])
  type      ChatType  @default(ORDER)
  name      String?
  
  // 聊天室状态
  isActive  Boolean   @default(true)
  
  // 时间戳
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // 关联关系
  participants User[] @relation("ChatParticipants")
  messages     Message[]
  
  @@map("chat_rooms")
}

enum ChatType {
  ORDER   // 订单聊天
  GROUP   // 群聊
  SYSTEM  // 系统通知
}

// 消息表
model Message {
  id         String      @id @default(cuid())
  chatRoomId String
  chatRoom   ChatRoom    @relation(fields: [chatRoomId], references: [id])
  senderId   String
  sender     User        @relation("MessageSender", fields: [senderId], references: [id])
  receiverId String?
  receiver   User?       @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  // 消息内容
  content    String      @db.Text
  type       MessageType @default(TEXT)
  fileUrl    String?
  fileName   String?
  fileSize   Int?
  
  // 消息状态
  isRead     Boolean     @default(false)
  isDeleted  Boolean     @default(false)
  
  // 时间戳
  createdAt  DateTime    @default(now())
  readAt     DateTime?
  
  @@map("messages")
}

enum MessageType {
  TEXT    // 文本
  IMAGE   // 图片
  FILE    // 文件
  SYSTEM  // 系统消息
}

// 通知表
model Notification {
  id        String           @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  
  // 通知内容
  title     String
  content   String           @db.Text
  type      NotificationType
  data      String?          @db.Text // JSON数据
  
  // 通知状态
  isRead    Boolean          @default(false)
  isDeleted Boolean          @default(false)
  
  // 时间戳
  createdAt DateTime         @default(now())
  readAt    DateTime?
  
  @@map("notifications")
}

enum NotificationType {
  ORDER     // 订单通知
  PAYMENT   // 支付通知
  MESSAGE   // 消息通知
  SYSTEM    // 系统通知
  REVIEW    // 评价通知
  PROMOTION // 推广通知
}

// 文件表
model File {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  
  // 文件信息
  originalName String
  fileName     String  @unique
  filePath     String
  fileSize     Int
  mimeType     String
  fileHash     String? // 文件哈希，用于去重
  
  // 文件分类
  category     FileCategory
  isPublic     Boolean  @default(false)
  
  // 时间戳
  createdAt    DateTime @default(now())
  expiresAt    DateTime?
  
  @@map("files")
}

enum FileCategory {
  AVATAR    // 头像
  RESOURCE  // 资源图片
  MESSAGE   // 聊天文件
  DOCUMENT  // 文档
  OTHER     // 其他
}

// 系统配置表
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  type      ConfigType @default(STRING)
  category  String   @default("system")
  description String?
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_configs")
}

enum ConfigType {
  STRING
  NUMBER
  BOOLEAN
  JSON
  TEXT
}

// 日志表
model SystemLog {
  id        String    @id @default(cuid())
  level     LogLevel  @default(INFO)
  module    String
  action    String
  message   String    @db.Text
  data      String?   @db.Text
  userId    String?
  ip        String?
  userAgent String?   @db.Text
  createdAt DateTime  @default(now())
  
  @@map("system_logs")
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}