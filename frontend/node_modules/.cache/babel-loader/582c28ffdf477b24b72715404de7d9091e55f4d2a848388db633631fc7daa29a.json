{"ast":null,"code":"import { API_BASE_URL } from '../config/api';\n\n/**\n * GitHub OAuth回调响应接口\n */\n\n/**\n * GitHub OAuth授权URL响应接口\n */\n\n/**\n * GitHub OAuth服务类\n * 处理GitHub OAuth认证相关的前端逻辑\n */\nexport class GitHubOAuthService {\n  constructor() {\n    this.baseUrl = void 0;\n    this.baseUrl = API_BASE_URL;\n  }\n\n  /**\n   * 获取GitHub OAuth授权URL\n   * @returns Promise<GitHubAuthUrlResponse>\n   */\n  async getAuthUrl() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/auth/github/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 保存state到本地存储，用于后续验证\n      if (data.state) {\n        localStorage.setItem('github_oauth_state', data.state);\n      }\n      return data;\n    } catch (error) {\n      console.error('获取GitHub授权URL失败:', error);\n      throw new Error(error instanceof Error ? error.message : '获取GitHub授权URL时发生未知错误');\n    }\n  }\n\n  /**\n   * 处理GitHub OAuth回调\n   * @param code 授权码\n   * @param state 状态参数\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async handleCallback(code, state) {\n    try {\n      // 验证state参数\n      const savedState = localStorage.getItem('github_oauth_state');\n      if (savedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n      const response = await fetch(`${this.baseUrl}/api/auth/github/callback?code=${encodeURIComponent(code)}&state=${encodeURIComponent(state)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        credentials: 'include'\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      return data;\n    } catch (error) {\n      console.error('GitHub OAuth回调处理失败:', error);\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      throw new Error(error instanceof Error ? error.message : 'GitHub OAuth回调处理时发生未知错误');\n    }\n  }\n\n  /**\n   * 绑定GitHub账户到现有用户\n   * @param code 授权码\n   * @param state 状态参数\n   * @param userId 用户ID\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async bindAccount(code, state, userId) {\n    try {\n      // 验证state参数\n      const savedState = localStorage.getItem('github_oauth_state');\n      if (savedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n      const response = await fetch(`${this.baseUrl}/api/auth/github/bind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          code,\n          state,\n          userId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      return data;\n    } catch (error) {\n      console.error('GitHub账户绑定失败:', error);\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      throw new Error(error instanceof Error ? error.message : 'GitHub账户绑定时发生未知错误');\n    }\n  }\n\n  /**\n   * 解绑GitHub账户\n   * @param userId 用户ID\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async unbindAccount(userId) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/auth/github/unbind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          userId\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('GitHub账户解绑失败:', error);\n      throw new Error(error instanceof Error ? error.message : 'GitHub账户解绑时发生未知错误');\n    }\n  }\n\n  /**\n   * 检查是否在GitHub授权回调页面\n   * @returns boolean\n   */\n  static isGitHubCallback() {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.has('code') && urlParams.has('state') && window.location.pathname.includes('/auth/github/callback');\n  }\n\n  /**\n   * 从URL获取GitHub OAuth回调参数\n   * @returns {code: string, state: string} | null\n   */\n  static getCallbackParams() {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const state = urlParams.get('state');\n    if (code && state) {\n      return {\n        code,\n        state\n      };\n    }\n    return null;\n  }\n\n  /**\n   * 清理URL中的OAuth参数\n   */\n  static cleanupUrl() {\n    const url = new URL(window.location.href);\n    url.searchParams.delete('code');\n    url.searchParams.delete('state');\n    url.searchParams.delete('error');\n    url.searchParams.delete('error_description');\n\n    // 使用replaceState避免在浏览器历史中留下OAuth参数\n    window.history.replaceState({}, document.title, url.toString());\n  }\n\n  /**\n   * 检查GitHub OAuth是否配置正确\n   * @returns Promise<boolean>\n   */\n  async isConfigured() {\n    try {\n      const response = await this.getAuthUrl();\n      return response.success && !!response.authUrl;\n    } catch (error) {\n      console.warn('GitHub OAuth配置检查失败:', error);\n      return false;\n    }\n  }\n}\n\n// 导出单例实例\nexport const githubOAuthService = new GitHubOAuthService();","map":{"version":3,"names":["API_BASE_URL","GitHubOAuthService","constructor","baseUrl","getAuthUrl","response","fetch","method","headers","credentials","data","json","ok","Error","message","status","state","localStorage","setItem","error","console","handleCallback","code","savedState","getItem","encodeURIComponent","removeItem","bindAccount","userId","body","JSON","stringify","unbindAccount","isGitHubCallback","urlParams","URLSearchParams","window","location","search","has","pathname","includes","getCallbackParams","get","cleanupUrl","url","URL","href","searchParams","delete","history","replaceState","document","title","toString","isConfigured","success","authUrl","warn","githubOAuthService"],"sources":["D:/project/trade/frontend/src/services/githubOAuthService.ts"],"sourcesContent":["import { API_BASE_URL } from '../config/api';\n\n/**\n * GitHub OAuth回调响应接口\n */\ninterface GitHubOAuthCallbackResponse {\n  success: boolean;\n  message: string;\n  user?: {\n    id: string;\n    username: string;\n    email: string;\n    nickname: string;\n    avatar: string;\n    isEmailVerified: boolean;\n    isPhoneVerified: boolean;\n  };\n  token?: string;\n  error?: string;\n}\n\n/**\n * GitHub OAuth授权URL响应接口\n */\ninterface GitHubAuthUrlResponse {\n  success: boolean;\n  authUrl: string;\n  state: string;\n  message?: string;\n  error?: string;\n}\n\n/**\n * GitHub OAuth服务类\n * 处理GitHub OAuth认证相关的前端逻辑\n */\nexport class GitHubOAuthService {\n  private readonly baseUrl: string;\n\n  constructor() {\n    this.baseUrl = API_BASE_URL;\n  }\n\n  /**\n   * 获取GitHub OAuth授权URL\n   * @returns Promise<GitHubAuthUrlResponse>\n   */\n  async getAuthUrl(): Promise<GitHubAuthUrlResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/auth/github/login`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 保存state到本地存储，用于后续验证\n      if (data.state) {\n        localStorage.setItem('github_oauth_state', data.state);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('获取GitHub授权URL失败:', error);\n      throw new Error(\n        error instanceof Error \n          ? error.message \n          : '获取GitHub授权URL时发生未知错误'\n      );\n    }\n  }\n\n  /**\n   * 处理GitHub OAuth回调\n   * @param code 授权码\n   * @param state 状态参数\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async handleCallback(code: string, state: string): Promise<GitHubOAuthCallbackResponse> {\n    try {\n      // 验证state参数\n      const savedState = localStorage.getItem('github_oauth_state');\n      if (savedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n\n      const response = await fetch(`${this.baseUrl}/api/auth/github/callback?code=${encodeURIComponent(code)}&state=${encodeURIComponent(state)}`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        credentials: 'include'\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n\n      return data;\n    } catch (error) {\n      console.error('GitHub OAuth回调处理失败:', error);\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      throw new Error(\n        error instanceof Error \n          ? error.message \n          : 'GitHub OAuth回调处理时发生未知错误'\n      );\n    }\n  }\n\n  /**\n   * 绑定GitHub账户到现有用户\n   * @param code 授权码\n   * @param state 状态参数\n   * @param userId 用户ID\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async bindAccount(code: string, state: string, userId: string): Promise<GitHubOAuthCallbackResponse> {\n    try {\n      // 验证state参数\n      const savedState = localStorage.getItem('github_oauth_state');\n      if (savedState !== state) {\n        throw new Error('状态参数验证失败，可能存在安全风险');\n      }\n\n      const response = await fetch(`${this.baseUrl}/api/auth/github/bind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          code,\n          state,\n          userId\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n\n      return data;\n    } catch (error) {\n      console.error('GitHub账户绑定失败:', error);\n      // 清除本地存储的state\n      localStorage.removeItem('github_oauth_state');\n      throw new Error(\n        error instanceof Error \n          ? error.message \n          : 'GitHub账户绑定时发生未知错误'\n      );\n    }\n  }\n\n  /**\n   * 解绑GitHub账户\n   * @param userId 用户ID\n   * @returns Promise<GitHubOAuthCallbackResponse>\n   */\n  async unbindAccount(userId: string): Promise<GitHubOAuthCallbackResponse> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/auth/github/unbind`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`\n        },\n        credentials: 'include',\n        body: JSON.stringify({\n          userId\n        })\n      });\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP错误: ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error('GitHub账户解绑失败:', error);\n      throw new Error(\n        error instanceof Error \n          ? error.message \n          : 'GitHub账户解绑时发生未知错误'\n      );\n    }\n  }\n\n  /**\n   * 检查是否在GitHub授权回调页面\n   * @returns boolean\n   */\n  static isGitHubCallback(): boolean {\n    const urlParams = new URLSearchParams(window.location.search);\n    return urlParams.has('code') && urlParams.has('state') && window.location.pathname.includes('/auth/github/callback');\n  }\n\n  /**\n   * 从URL获取GitHub OAuth回调参数\n   * @returns {code: string, state: string} | null\n   */\n  static getCallbackParams(): { code: string; state: string } | null {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const state = urlParams.get('state');\n\n    if (code && state) {\n      return { code, state };\n    }\n\n    return null;\n  }\n\n  /**\n   * 清理URL中的OAuth参数\n   */\n  static cleanupUrl(): void {\n    const url = new URL(window.location.href);\n    url.searchParams.delete('code');\n    url.searchParams.delete('state');\n    url.searchParams.delete('error');\n    url.searchParams.delete('error_description');\n    \n    // 使用replaceState避免在浏览器历史中留下OAuth参数\n    window.history.replaceState({}, document.title, url.toString());\n  }\n\n  /**\n   * 检查GitHub OAuth是否配置正确\n   * @returns Promise<boolean>\n   */\n  async isConfigured(): Promise<boolean> {\n    try {\n      const response = await this.getAuthUrl();\n      return response.success && !!response.authUrl;\n    } catch (error) {\n      console.warn('GitHub OAuth配置检查失败:', error);\n      return false;\n    }\n  }\n}\n\n// 导出单例实例\nexport const githubOAuthService = new GitHubOAuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}