{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\trade\\\\frontend\\\\src\\\\hooks\\\\useChat.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport io from 'socket.io-client';\nimport { chatService } from '../services/api';\nimport { useAuth } from './useAuth';\nimport { toast } from 'react-hot-toast';\n\n// 聊天上下文类型定义\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext(undefined);\n\n// 聊天提供者组件\nexport const ChatProvider = ({\n  children\n}) => {\n  _s();\n  const queryClient = useQueryClient();\n  const {\n    user,\n    token\n  } = useAuth();\n  const [currentChat, setCurrentChat] = useState(null);\n  const [socket, setSocket] = useState(null);\n\n  // WebSocket连接状态\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 获取未读消息数量\n  const {\n    data: unreadCountData\n  } = useQuery({\n    queryKey: ['unreadMessages'],\n    queryFn: () => chatService.getUnreadCount(),\n    refetchInterval: 30000 // 每30秒刷新一次\n  });\n\n  // 获取当前聊天消息（分页加载）\n  const {\n    data: messagesData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error\n  } = useInfiniteQuery({\n    queryKey: ['chatMessages', currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId],\n    queryFn: ({\n      pageParam = 1\n    }) => {\n      if (!(currentChat !== null && currentChat !== void 0 && currentChat.orderId)) {\n        throw new Error('No active chat');\n      }\n      return chatService.getChatMessages(currentChat.orderId);\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) => {\n      var _lastPage$data;\n      // 这里需要根据实际API响应结构调整\n      const totalMessages = ((_lastPage$data = lastPage.data) === null || _lastPage$data === void 0 ? void 0 : _lastPage$data.length) || 0;\n      const loadedMessages = allPages.reduce((acc, page) => {\n        var _page$data;\n        return acc + (((_page$data = page.data) === null || _page$data === void 0 ? void 0 : _page$data.length) || 0);\n      }, 0);\n\n      // 假设每页20条消息，如果还有更多则返回下一页\n      if (totalMessages === 20 && loadedMessages < 100) {\n        // 假设最多100条\n        return allPages.length + 1;\n      }\n      return undefined;\n    },\n    enabled: !!(currentChat !== null && currentChat !== void 0 && currentChat.orderId),\n    staleTime: 5 * 60 * 1000 // 5分钟\n  });\n\n  // 发送消息mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: data => chatService.sendMessage({\n      orderId: data.orderId,\n      receiverId: data.receiverId,\n      message: data.message,\n      type: data.type\n    }),\n    onSuccess: () => {\n      // 刷新当前聊天消息\n      queryClient.invalidateQueries({\n        queryKey: ['chatMessages', currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId]\n      });\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({\n        queryKey: ['unreadMessages']\n      });\n    }\n  });\n\n  // 标记消息已读mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: messageId => chatService.markAsRead(messageId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['unreadMessages']\n      });\n    }\n  });\n\n  // 初始化Socket.IO连接\n  useEffect(() => {\n    if (!token || !user) return;\n\n    // 创建Socket.IO连接\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:3002', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n\n    // 连接成功事件\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      console.log('聊天Socket连接成功');\n    });\n\n    // 接收新消息\n    newSocket.on('new_message', message => {\n      // 添加新消息到缓存\n      queryClient.setQueryData(['chatMessages', message.orderId], oldData => {\n        if (!oldData) return oldData;\n        const newPages = oldData.pages.map((page, index) => {\n          if (index === 0) {\n            return {\n              ...page,\n              data: [message, ...page.data]\n            };\n          }\n          return page;\n        });\n        return {\n          ...oldData,\n          pages: newPages\n        };\n      });\n\n      // 显示新消息通知\n      if (message.senderId !== user.id) {\n        toast.success('收到新消息');\n      }\n\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({\n        queryKey: ['unreadMessages']\n      });\n    });\n\n    // 接收聊天记录\n    newSocket.on('chat_history', messages => {\n      queryClient.setQueryData(['chatMessages', currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId], {\n        pages: [{\n          data: messages\n        }],\n        pageParams: [1]\n      });\n    });\n\n    // 接收未读消息数量\n    newSocket.on('unread_messages', count => {\n      queryClient.setQueryData(['unreadMessages'], {\n        data: count\n      });\n    });\n\n    // 错误处理\n    newSocket.on('error', error => {\n      console.error('聊天Socket错误:', error);\n      toast.error(error.error || '聊天服务连接失败');\n    });\n\n    // 连接断开事件\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n      console.log('聊天Socket连接断开');\n    });\n    setSocket(newSocket);\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [token, user, queryClient, currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId]);\n\n  // 发送消息函数\n  const sendMessage = async (content, type = 'text') => {\n    if (!(currentChat !== null && currentChat !== void 0 && currentChat.orderId) || !(currentChat !== null && currentChat !== void 0 && currentChat.userId) || !socket) {\n      throw new Error('No active chat or socket connection');\n    }\n    try {\n      // 通过Socket.IO发送消息\n      socket.emit('send_message', {\n        orderId: currentChat.orderId,\n        receiverId: currentChat.userId,\n        content: content,\n        type\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      toast.error('发送消息失败');\n      throw error;\n    }\n  };\n\n  // 标记消息已读函数\n  const markMessageAsRead = async messageId => {\n    if (!socket) return;\n    try {\n      socket.emit('mark_messages_read', [messageId]);\n    } catch (error) {\n      console.error('标记消息已读失败:', error);\n    }\n  };\n\n  // 获取聊天记录函数\n  const getChatHistory = async orderId => {\n    if (!socket) return;\n    try {\n      socket.emit('get_chat_history', {\n        orderId\n      });\n    } catch (error) {\n      console.error('获取聊天记录失败:', error);\n    }\n  };\n\n  // 加载更多消息函数\n  const loadMoreMessages = () => {\n    if (hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  // 获取所有消息\n  const messages = (messagesData === null || messagesData === void 0 ? void 0 : messagesData.pages.flatMap(page => page.data || [])) || [];\n\n  // 当切换聊天时，获取聊天记录\n  useEffect(() => {\n    if (currentChat !== null && currentChat !== void 0 && currentChat.orderId && socket) {\n      getChatHistory(currentChat.orderId);\n    }\n  }, [currentChat === null || currentChat === void 0 ? void 0 : currentChat.orderId, socket]);\n  const value = {\n    currentChat,\n    messages,\n    unreadCount: (unreadCountData === null || unreadCountData === void 0 ? void 0 : unreadCountData.data) || 0,\n    sendMessage,\n    loadMoreMessages,\n    setCurrentChat,\n    markMessageAsRead,\n    hasMoreMessages: hasNextPage || false,\n    isLoading: isLoading || sendMessageMutation.isPending,\n    error: error\n  };\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 5\n  }, this);\n};\n\n// 使用聊天hook\n_s(ChatProvider, \"j7CdKOg4AFiLCYm4+m+BQi4pml8=\", false, function () {\n  return [useQueryClient, useAuth, useQuery, useInfiniteQuery, useMutation, useMutation];\n});\n_c = ChatProvider;\nexport const useChat = () => {\n  _s2();\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat必须在ChatProvider中使用');\n  }\n  return context;\n};\n_s2(useChat, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","useInfiniteQuery","io","chatService","useAuth","toast","jsxDEV","_jsxDEV","ChatContext","undefined","ChatProvider","children","_s","queryClient","user","token","currentChat","setCurrentChat","socket","setSocket","isConnected","setIsConnected","data","unreadCountData","queryKey","queryFn","getUnreadCount","refetchInterval","messagesData","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","error","orderId","pageParam","Error","getChatMessages","initialPageParam","getNextPageParam","lastPage","allPages","_lastPage$data","totalMessages","length","loadedMessages","reduce","acc","page","_page$data","enabled","staleTime","sendMessageMutation","mutationFn","sendMessage","receiverId","message","type","onSuccess","invalidateQueries","markAsReadMutation","messageId","markAsRead","newSocket","process","env","REACT_APP_API_URL","auth","transports","on","console","log","setQueryData","oldData","newPages","pages","map","index","senderId","id","success","messages","pageParams","count","disconnect","content","userId","emit","markMessageAsRead","getChatHistory","loadMoreMessages","flatMap","value","unreadCount","hasMoreMessages","isPending","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useChat","_s2","context","$RefreshReg$"],"sources":["D:/project/trade/frontend/src/hooks/useChat.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport io from 'socket.io-client';\nimport { ChatMessage, CreateChatMessageRequest } from '../types';\nimport { chatService } from '../services/api';\nimport { useAuth } from './useAuth';\nimport { toast } from 'react-hot-toast';\n\n// 聊天上下文类型定义\ninterface ChatContextType {\n  // 当前聊天对话\n  currentChat: {\n    orderId: string;\n    userId: string;\n    userName: string;\n  } | null;\n  // 消息列表\n  messages: ChatMessage[];\n  // 未读消息数量\n  unreadCount: number;\n  // 发送消息\n  sendMessage: (content: string, type?: 'text' | 'image' | 'location') => Promise<void>;\n  // 加载更多消息\n  loadMoreMessages: () => void;\n  // 设置当前聊天\n  setCurrentChat: (chat: { orderId: string; userId: string; userName: string } | null) => void;\n  // 标记消息已读\n  markMessageAsRead: (messageId: string) => Promise<void>;\n  // 是否有更多消息\n  hasMoreMessages: boolean;\n  // 加载状态\n  isLoading: boolean;\n  // 错误信息\n  error: Error | null;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\n// 聊天提供者组件\nexport const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const { user, token } = useAuth();\n  const [currentChat, setCurrentChat] = useState<{ orderId: string; userId: string; userName: string } | null>(null);\n  const [socket, setSocket] = useState<any>(null);\n\n  // WebSocket连接状态\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 获取未读消息数量\n  const { data: unreadCountData } = useQuery({\n    queryKey: ['unreadMessages'],\n    queryFn: () => chatService.getUnreadCount(),\n    refetchInterval: 30000, // 每30秒刷新一次\n  });\n\n  // 获取当前聊天消息（分页加载）\n  const {\n    data: messagesData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error,\n  } = useInfiniteQuery({\n    queryKey: ['chatMessages', currentChat?.orderId],\n    queryFn: ({ pageParam = 1 }) => {\n      if (!currentChat?.orderId) {\n        throw new Error('No active chat');\n      }\n      return chatService.getChatMessages(currentChat.orderId);\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) => {\n      // 这里需要根据实际API响应结构调整\n      const totalMessages = lastPage.data?.length || 0;\n      const loadedMessages = allPages.reduce((acc, page) => acc + (page.data?.length || 0), 0);\n      \n      // 假设每页20条消息，如果还有更多则返回下一页\n      if (totalMessages === 20 && loadedMessages < 100) { // 假设最多100条\n        return allPages.length + 1;\n      }\n      return undefined;\n    },\n    enabled: !!currentChat?.orderId,\n    staleTime: 5 * 60 * 1000, // 5分钟\n  });\n\n  // 发送消息mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: {\n      orderId: string;\n      receiverId: string;\n      message: string;\n      type: 'text' | 'image' | 'location';\n    }) => chatService.sendMessage({\n      orderId: data.orderId,\n      receiverId: data.receiverId,\n      message: data.message,\n      type: data.type,\n    }),\n    onSuccess: () => {\n      // 刷新当前聊天消息\n      queryClient.invalidateQueries({ queryKey: ['chatMessages', currentChat?.orderId] });\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // 标记消息已读mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: (messageId: string) => chatService.markAsRead(messageId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // 初始化Socket.IO连接\n  useEffect(() => {\n    if (!token || !user) return;\n\n    // 创建Socket.IO连接\n    const newSocket = io(process.env.REACT_APP_API_URL || 'http://localhost:3002', {\n      auth: {\n        token: token\n      },\n      transports: ['websocket', 'polling']\n    });\n\n    // 连接成功事件\n    newSocket.on('connect', () => {\n      setIsConnected(true);\n      console.log('聊天Socket连接成功');\n    });\n\n    // 接收新消息\n    newSocket.on('new_message', (message: ChatMessage) => {\n      // 添加新消息到缓存\n      queryClient.setQueryData(['chatMessages', message.orderId], (oldData: any) => {\n        if (!oldData) return oldData;\n        \n        const newPages = oldData.pages.map((page: any, index: number) => {\n          if (index === 0) {\n            return {\n              ...page,\n              data: [message, ...page.data]\n            };\n          }\n          return page;\n        });\n        \n        return {\n          ...oldData,\n          pages: newPages,\n        };\n      });\n\n      // 显示新消息通知\n       if (message.senderId !== user.id) {\n         toast.success('收到新消息');\n       }\n\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    });\n\n    // 接收聊天记录\n    newSocket.on('chat_history', (messages: ChatMessage[]) => {\n      queryClient.setQueryData(['chatMessages', currentChat?.orderId], {\n        pages: [{ data: messages }],\n        pageParams: [1]\n      });\n    });\n\n    // 接收未读消息数量\n    newSocket.on('unread_messages', (count: number) => {\n      queryClient.setQueryData(['unreadMessages'], { data: count });\n    });\n\n    // 错误处理\n    newSocket.on('error', (error: { type: string; error: string }) => {\n      console.error('聊天Socket错误:', error);\n      toast.error(error.error || '聊天服务连接失败');\n    });\n\n    // 连接断开事件\n    newSocket.on('disconnect', () => {\n      setIsConnected(false);\n      console.log('聊天Socket连接断开');\n    });\n\n    setSocket(newSocket);\n\n    return () => {\n      newSocket.disconnect();\n    };\n  }, [token, user, queryClient, currentChat?.orderId]);\n\n  // 发送消息函数\n  const sendMessage = async (content: string, type: 'text' | 'image' | 'location' = 'text') => {\n    if (!currentChat?.orderId || !currentChat?.userId || !socket) {\n      throw new Error('No active chat or socket connection');\n    }\n\n    try {\n      // 通过Socket.IO发送消息\n      socket.emit('send_message', {\n        orderId: currentChat.orderId,\n        receiverId: currentChat.userId,\n        content: content,\n        type,\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      toast.error('发送消息失败');\n      throw error;\n    }\n  };\n\n  // 标记消息已读函数\n  const markMessageAsRead = async (messageId: string) => {\n    if (!socket) return;\n\n    try {\n      socket.emit('mark_messages_read', [messageId]);\n    } catch (error) {\n      console.error('标记消息已读失败:', error);\n    }\n  };\n\n  // 获取聊天记录函数\n  const getChatHistory = async (orderId: string) => {\n    if (!socket) return;\n\n    try {\n      socket.emit('get_chat_history', { orderId });\n    } catch (error) {\n      console.error('获取聊天记录失败:', error);\n    }\n  };\n\n  // 加载更多消息函数\n  const loadMoreMessages = () => {\n    if (hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  // 获取所有消息\n  const messages = messagesData?.pages.flatMap(page => page.data || []) || [];\n\n  // 当切换聊天时，获取聊天记录\n  useEffect(() => {\n    if (currentChat?.orderId && socket) {\n      getChatHistory(currentChat.orderId);\n    }\n  }, [currentChat?.orderId, socket]);\n\n  const value: ChatContextType = {\n    currentChat,\n    messages,\n    unreadCount: unreadCountData?.data || 0,\n    sendMessage,\n    loadMoreMessages,\n    setCurrentChat,\n    markMessageAsRead,\n    hasMoreMessages: hasNextPage || false,\n    isLoading: isLoading || sendMessageMutation.isPending,\n    error: error as Error | null,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\n// 使用聊天hook\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat必须在ChatProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}