{"ast":null,"code":"import _objectSpread from\"D:/project/trade/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,createContext,useContext}from'react';import{useQuery,useMutation,useQueryClient,useInfiniteQuery}from'@tanstack/react-query';import{chatService}from'../services/api';// 聊天上下文类型定义\nimport{jsx as _jsx}from\"react/jsx-runtime\";const ChatContext=/*#__PURE__*/createContext(undefined);// 聊天提供者组件\nexport const ChatProvider=_ref=>{let{children}=_ref;const queryClient=useQueryClient();const[currentChat,setCurrentChat]=useState(null);// WebSocket连接状态\nconst[isConnected,setIsConnected]=useState(false);// 获取未读消息数量\nconst{data:unreadCountData}=useQuery({queryKey:['unreadMessages'],queryFn:()=>chatService.getUnreadCount(),refetchInterval:30000// 每30秒刷新一次\n});// 获取当前聊天消息（分页加载）\nconst{data:messagesData,fetchNextPage,hasNextPage,isFetchingNextPage,isLoading,error}=useInfiniteQuery({queryKey:['chatMessages',currentChat===null||currentChat===void 0?void 0:currentChat.orderId],queryFn:_ref2=>{let{pageParam=1}=_ref2;if(!(currentChat!==null&&currentChat!==void 0&&currentChat.orderId)){throw new Error('No active chat');}return chatService.getChatMessages(currentChat.orderId);},initialPageParam:1,getNextPageParam:(lastPage,allPages)=>{var _lastPage$data;// 这里需要根据实际API响应结构调整\nconst totalMessages=((_lastPage$data=lastPage.data)===null||_lastPage$data===void 0?void 0:_lastPage$data.length)||0;const loadedMessages=allPages.reduce((acc,page)=>{var _page$data;return acc+(((_page$data=page.data)===null||_page$data===void 0?void 0:_page$data.length)||0);},0);// 假设每页20条消息，如果还有更多则返回下一页\nif(totalMessages===20&&loadedMessages<100){// 假设最多100条\nreturn allPages.length+1;}return undefined;},enabled:!!(currentChat!==null&&currentChat!==void 0&&currentChat.orderId),staleTime:5*60*1000// 5分钟\n});// 发送消息mutation\nconst sendMessageMutation=useMutation({mutationFn:data=>chatService.sendMessage({orderId:data.orderId,receiverId:data.receiverId,message:data.message,type:data.type}),onSuccess:()=>{// 刷新当前聊天消息\nqueryClient.invalidateQueries({queryKey:['chatMessages',currentChat===null||currentChat===void 0?void 0:currentChat.orderId]});// 刷新未读消息数量\nqueryClient.invalidateQueries({queryKey:['unreadMessages']});}});// 标记消息已读mutation\nconst markAsReadMutation=useMutation({mutationFn:messageId=>chatService.markAsRead(messageId),onSuccess:()=>{queryClient.invalidateQueries({queryKey:['unreadMessages']});}});// WebSocket连接和消息监听\nuseEffect(()=>{if(!(currentChat!==null&&currentChat!==void 0&&currentChat.orderId))return;// 创建WebSocket连接\nconst wsUrl=\"\".concat(process.env.REACT_APP_WS_URL||'ws://localhost:3001',\"/chat/\").concat(currentChat.orderId);const ws=new WebSocket(wsUrl);ws.onopen=()=>{setIsConnected(true);console.log('WebSocket连接已建立');};ws.onmessage=event=>{try{const message=JSON.parse(event.data);// 添加新消息到缓存\nqueryClient.setQueryData(['chatMessages',currentChat.orderId],oldData=>{if(!oldData)return oldData;const newPages=oldData.pages.map(page=>_objectSpread(_objectSpread({},page),{},{data:[...page.data,message]}));return _objectSpread(_objectSpread({},oldData),{},{pages:newPages});});// 如果是接收到的消息，标记为已读\nif(message.senderId!==currentChat.userId){setTimeout(()=>{markMessageAsRead(message.id);},1000);}}catch(error){console.error('解析消息失败:',error);}};ws.onclose=()=>{setIsConnected(false);console.log('WebSocket连接已关闭');};ws.onerror=error=>{console.error('WebSocket错误:',error);};return()=>{if(ws.readyState===WebSocket.OPEN){ws.close();}};},[currentChat===null||currentChat===void 0?void 0:currentChat.orderId,queryClient]);// 发送消息函数\nconst sendMessage=async function(content){let type=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'text';if(!(currentChat!==null&&currentChat!==void 0&&currentChat.orderId)||!(currentChat!==null&&currentChat!==void 0&&currentChat.userId)){throw new Error('No active chat');}try{await sendMessageMutation.mutateAsync({orderId:currentChat.orderId,receiverId:currentChat.userId,message:content,type});}catch(error){console.error('发送消息失败:',error);throw error;}};// 加载更多消息\nconst loadMoreMessages=()=>{if(hasNextPage&&!isFetchingNextPage){fetchNextPage();}};// 标记消息已读\nconst markMessageAsRead=async messageId=>{try{await markAsReadMutation.mutateAsync(messageId);}catch(error){console.error('标记消息已读失败:',error);}};// 获取所有消息\nconst messages=(messagesData===null||messagesData===void 0?void 0:messagesData.pages.flatMap(page=>page.data||[]))||[];const value={currentChat,messages,unreadCount:(unreadCountData===null||unreadCountData===void 0?void 0:unreadCountData.data)||0,sendMessage,loadMoreMessages,setCurrentChat,markMessageAsRead,hasMoreMessages:hasNextPage||false,isLoading:isLoading||sendMessageMutation.isPending,error:error};return/*#__PURE__*/_jsx(ChatContext.Provider,{value:value,children:children});};// 使用聊天hook\nexport const useChat=()=>{const context=useContext(ChatContext);if(context===undefined){throw new Error('useChat必须在ChatProvider中使用');}return context;};","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","useInfiniteQuery","chatService","jsx","_jsx","ChatContext","undefined","ChatProvider","_ref","children","queryClient","currentChat","setCurrentChat","isConnected","setIsConnected","data","unreadCountData","queryKey","queryFn","getUnreadCount","refetchInterval","messagesData","fetchNextPage","hasNextPage","isFetchingNextPage","isLoading","error","orderId","_ref2","pageParam","Error","getChatMessages","initialPageParam","getNextPageParam","lastPage","allPages","_lastPage$data","totalMessages","length","loadedMessages","reduce","acc","page","_page$data","enabled","staleTime","sendMessageMutation","mutationFn","sendMessage","receiverId","message","type","onSuccess","invalidateQueries","markAsReadMutation","messageId","markAsRead","wsUrl","concat","process","env","REACT_APP_WS_URL","ws","WebSocket","onopen","console","log","onmessage","event","JSON","parse","setQueryData","oldData","newPages","pages","map","_objectSpread","senderId","userId","setTimeout","markMessageAsRead","id","onclose","onerror","readyState","OPEN","close","content","arguments","mutateAsync","loadMoreMessages","messages","flatMap","value","unreadCount","hasMoreMessages","isPending","Provider","useChat","context"],"sources":["D:/project/trade/frontend/src/hooks/useChat.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient, useInfiniteQuery } from '@tanstack/react-query';\nimport { ChatMessage, CreateChatMessageRequest } from '../types';\nimport { chatService } from '../services/api';\n\n// 聊天上下文类型定义\ninterface ChatContextType {\n  // 当前聊天对话\n  currentChat: {\n    orderId: string;\n    userId: string;\n    userName: string;\n  } | null;\n  // 消息列表\n  messages: ChatMessage[];\n  // 未读消息数量\n  unreadCount: number;\n  // 发送消息\n  sendMessage: (content: string, type?: 'text' | 'image' | 'location') => Promise<void>;\n  // 加载更多消息\n  loadMoreMessages: () => void;\n  // 设置当前聊天\n  setCurrentChat: (chat: { orderId: string; userId: string; userName: string } | null) => void;\n  // 标记消息已读\n  markMessageAsRead: (messageId: string) => Promise<void>;\n  // 是否有更多消息\n  hasMoreMessages: boolean;\n  // 加载状态\n  isLoading: boolean;\n  // 错误信息\n  error: Error | null;\n}\n\nconst ChatContext = createContext<ChatContextType | undefined>(undefined);\n\n// 聊天提供者组件\nexport const ChatProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [currentChat, setCurrentChat] = useState<{ orderId: string; userId: string; userName: string } | null>(null);\n\n  // WebSocket连接状态\n  const [isConnected, setIsConnected] = useState(false);\n\n  // 获取未读消息数量\n  const { data: unreadCountData } = useQuery({\n    queryKey: ['unreadMessages'],\n    queryFn: () => chatService.getUnreadCount(),\n    refetchInterval: 30000, // 每30秒刷新一次\n  });\n\n  // 获取当前聊天消息（分页加载）\n  const {\n    data: messagesData,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n    isLoading,\n    error,\n  } = useInfiniteQuery({\n    queryKey: ['chatMessages', currentChat?.orderId],\n    queryFn: ({ pageParam = 1 }) => {\n      if (!currentChat?.orderId) {\n        throw new Error('No active chat');\n      }\n      return chatService.getChatMessages(currentChat.orderId);\n    },\n    initialPageParam: 1,\n    getNextPageParam: (lastPage, allPages) => {\n      // 这里需要根据实际API响应结构调整\n      const totalMessages = lastPage.data?.length || 0;\n      const loadedMessages = allPages.reduce((acc, page) => acc + (page.data?.length || 0), 0);\n      \n      // 假设每页20条消息，如果还有更多则返回下一页\n      if (totalMessages === 20 && loadedMessages < 100) { // 假设最多100条\n        return allPages.length + 1;\n      }\n      return undefined;\n    },\n    enabled: !!currentChat?.orderId,\n    staleTime: 5 * 60 * 1000, // 5分钟\n  });\n\n  // 发送消息mutation\n  const sendMessageMutation = useMutation({\n    mutationFn: (data: {\n      orderId: string;\n      receiverId: string;\n      message: string;\n      type: 'text' | 'image' | 'location';\n    }) => chatService.sendMessage({\n      orderId: data.orderId,\n      receiverId: data.receiverId,\n      message: data.message,\n      type: data.type,\n    }),\n    onSuccess: () => {\n      // 刷新当前聊天消息\n      queryClient.invalidateQueries({ queryKey: ['chatMessages', currentChat?.orderId] });\n      // 刷新未读消息数量\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // 标记消息已读mutation\n  const markAsReadMutation = useMutation({\n    mutationFn: (messageId: string) => chatService.markAsRead(messageId),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['unreadMessages'] });\n    },\n  });\n\n  // WebSocket连接和消息监听\n  useEffect(() => {\n    if (!currentChat?.orderId) return;\n\n    // 创建WebSocket连接\n    const wsUrl = `${process.env.REACT_APP_WS_URL || 'ws://localhost:3001'}/chat/${currentChat.orderId}`;\n    const ws = new WebSocket(wsUrl);\n\n    ws.onopen = () => {\n      setIsConnected(true);\n      console.log('WebSocket连接已建立');\n    };\n\n    ws.onmessage = (event) => {\n      try {\n        const message = JSON.parse(event.data);\n        // 添加新消息到缓存\n        queryClient.setQueryData(['chatMessages', currentChat.orderId], (oldData: any) => {\n          if (!oldData) return oldData;\n          \n          const newPages = oldData.pages.map((page: any) => ({\n            ...page,\n            data: [...page.data, message]\n          }));\n          \n          return {\n            ...oldData,\n            pages: newPages,\n          };\n        });\n\n        // 如果是接收到的消息，标记为已读\n        if (message.senderId !== currentChat.userId) {\n          setTimeout(() => {\n            markMessageAsRead(message.id);\n          }, 1000);\n        }\n      } catch (error) {\n        console.error('解析消息失败:', error);\n      }\n    };\n\n    ws.onclose = () => {\n      setIsConnected(false);\n      console.log('WebSocket连接已关闭');\n    };\n\n    ws.onerror = (error) => {\n      console.error('WebSocket错误:', error);\n    };\n\n    return () => {\n      if (ws.readyState === WebSocket.OPEN) {\n        ws.close();\n      }\n    };\n  }, [currentChat?.orderId, queryClient]);\n\n  // 发送消息函数\n  const sendMessage = async (content: string, type: 'text' | 'image' | 'location' = 'text') => {\n    if (!currentChat?.orderId || !currentChat?.userId) {\n      throw new Error('No active chat');\n    }\n\n    try {\n      await sendMessageMutation.mutateAsync({\n        orderId: currentChat.orderId,\n        receiverId: currentChat.userId,\n        message: content,\n        type,\n      });\n    } catch (error) {\n      console.error('发送消息失败:', error);\n      throw error;\n    }\n  };\n\n  // 加载更多消息\n  const loadMoreMessages = () => {\n    if (hasNextPage && !isFetchingNextPage) {\n      fetchNextPage();\n    }\n  };\n\n  // 标记消息已读\n  const markMessageAsRead = async (messageId: string) => {\n    try {\n      await markAsReadMutation.mutateAsync(messageId);\n    } catch (error) {\n      console.error('标记消息已读失败:', error);\n    }\n  };\n\n  // 获取所有消息\n  const messages = messagesData?.pages.flatMap(page => page.data || []) || [];\n\n  const value: ChatContextType = {\n    currentChat,\n    messages,\n    unreadCount: unreadCountData?.data || 0,\n    sendMessage,\n    loadMoreMessages,\n    setCurrentChat,\n    markMessageAsRead,\n    hasMoreMessages: hasNextPage || false,\n    isLoading: isLoading || sendMessageMutation.isPending,\n    error: error as Error | null,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\n// 使用聊天hook\nexport const useChat = () => {\n  const context = useContext(ChatContext);\n  if (context === undefined) {\n    throw new Error('useChat必须在ChatProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}