{"ast":null,"code":"import{useState,useEffect,createContext,useContext}from'react';import{useQuery,useMutation,useQueryClient}from'@tanstack/react-query';import{userService}from'../services/api';// 认证上下文\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);// 认证提供者组件\nexport const AuthProvider=_ref=>{let{children}=_ref;const queryClient=useQueryClient();const[isAuthenticated,setIsAuthenticated]=useState(false);// 获取当前用户信息\nconst{data:userData,isLoading,refetch:refetchUser}=useQuery({queryKey:['currentUser'],queryFn:()=>userService.getCurrentUser(),enabled:!!localStorage.getItem('token'),retry:1});// 登录mutation\nconst loginMutation=useMutation({mutationFn:_ref2=>{let{email,password}=_ref2;return userService.login({email,password});},onSuccess:data=>{if(data.success){setIsAuthenticated(true);queryClient.invalidateQueries({queryKey:['currentUser']});}}});// 注册mutation\nconst registerMutation=useMutation({mutationFn:data=>userService.register(data),onSuccess:data=>{if(data.success){queryClient.invalidateQueries({queryKey:['currentUser']});}}});// 更新用户信息mutation\nconst updateUserMutation=useMutation({mutationFn:data=>userService.updateUser(data),onSuccess:()=>{queryClient.invalidateQueries({queryKey:['currentUser']});}});// 更新认证状态\nuseEffect(()=>{setIsAuthenticated(!!localStorage.getItem('token')&&!!(userData!==null&&userData!==void 0&&userData.data));},[userData]);// 登录函数\nconst login=async(email,password)=>{try{await loginMutation.mutateAsync({email,password});}catch(error){throw error;}};// 注册函数\nconst register=async data=>{try{await registerMutation.mutateAsync(data);}catch(error){throw error;}};// 登出函数\nconst logout=()=>{localStorage.removeItem('token');setIsAuthenticated(false);queryClient.clear();window.location.href='/';};// 更新用户信息函数\nconst updateUser=async data=>{try{await updateUserMutation.mutateAsync(data);}catch(error){throw error;}};const value={user:(userData===null||userData===void 0?void 0:userData.data)||null,isLoading,isAuthenticated,login,register,logout,updateUser,refetchUser};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};// 使用认证hook\nexport const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth必须在AuthProvider中使用');}return context;};","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","userService","jsx","_jsx","AuthContext","undefined","AuthProvider","_ref","children","queryClient","isAuthenticated","setIsAuthenticated","data","userData","isLoading","refetch","refetchUser","queryKey","queryFn","getCurrentUser","enabled","localStorage","getItem","retry","loginMutation","mutationFn","_ref2","email","password","login","onSuccess","success","invalidateQueries","registerMutation","register","updateUserMutation","updateUser","mutateAsync","error","logout","removeItem","clear","window","location","href","value","user","Provider","useAuth","context","Error"],"sources":["D:/project/trade/frontend/src/hooks/useAuth.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { User } from '../types';\nimport { userService } from '../services/api';\n\n// 认证上下文\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => Promise<void>;\n  logout: () => void;\n  updateUser: (data: Partial<User>) => Promise<void>;\n  refetchUser: () => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// 认证提供者组件\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  // 获取当前用户信息\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser\n  } = useQuery({\n    queryKey: ['currentUser'],\n    queryFn: () => userService.getCurrentUser(),\n    enabled: !!localStorage.getItem('token'),\n    retry: 1,\n  });\n\n  // 登录mutation\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      userService.login({ email, password }),\n    onSuccess: (data) => {\n      if (data.success) {\n        setIsAuthenticated(true);\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 注册mutation\n  const registerMutation = useMutation({\n    mutationFn: (data: {\n      username: string;\n      email: string;\n      phone: string;\n      password: string;\n      confirmPassword: string;\n    }) => userService.register(data),\n    onSuccess: (data) => {\n      if (data.success) {\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 更新用户信息mutation\n  const updateUserMutation = useMutation({\n    mutationFn: (data: Partial<User>) => userService.updateUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n    },\n  });\n\n  // 更新认证状态\n  useEffect(() => {\n    setIsAuthenticated(!!localStorage.getItem('token') && !!userData?.data);\n  }, [userData]);\n\n  // 登录函数\n  const login = async (email: string, password: string) => {\n    try {\n      await loginMutation.mutateAsync({ email, password });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 注册函数\n  const register = async (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => {\n    try {\n      await registerMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = '/';\n  };\n\n  // 更新用户信息函数\n  const updateUser = async (data: Partial<User>) => {\n    try {\n      await updateUserMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  const value: AuthContextType = {\n    user: userData?.data || null,\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUser,\n    refetchUser,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// 使用认证hook\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth必须在AuthProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}