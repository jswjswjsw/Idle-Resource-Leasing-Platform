{"ast":null,"code":"var _jsxFileName = \"D:\\\\project\\\\trade\\\\frontend\\\\src\\\\hooks\\\\useAuth.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { userService } from '../services/api';\n\n// 认证上下文\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\n\n// 认证提供者组件\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [currentToken, setCurrentToken] = useState(null);\n\n  // 获取当前用户信息\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser\n  } = useQuery({\n    queryKey: ['currentUser'],\n    queryFn: () => userService.getCurrentUser(),\n    enabled: !!localStorage.getItem('token'),\n    retry: 1\n  });\n\n  // 登录mutation\n  const loginMutation = useMutation({\n    mutationFn: ({\n      email,\n      password\n    }) => userService.login({\n      email,\n      password\n    }),\n    onSuccess: data => {\n      if (data.success) {\n        setIsAuthenticated(true);\n        queryClient.invalidateQueries({\n          queryKey: ['currentUser']\n        });\n      }\n    }\n  });\n\n  // 注册mutation\n  const registerMutation = useMutation({\n    mutationFn: data => userService.register(data),\n    onSuccess: data => {\n      if (data.success) {\n        queryClient.invalidateQueries({\n          queryKey: ['currentUser']\n        });\n      }\n    }\n  });\n\n  // 更新用户信息mutation\n  const updateUserMutation = useMutation({\n    mutationFn: data => userService.updateUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['currentUser']\n      });\n    }\n  });\n\n  // 更新认证状态\n  useEffect(() => {\n    const token = currentToken || localStorage.getItem('token');\n    const user = currentUser || (userData === null || userData === void 0 ? void 0 : userData.data);\n    setIsAuthenticated(!!token && !!user);\n  }, [userData, currentUser, currentToken]);\n\n  // 初始化时从localStorage获取token\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken && !currentToken) {\n      setCurrentToken(storedToken);\n    }\n  }, [currentToken]);\n\n  // 登录函数\n  const login = async (email, password) => {\n    try {\n      await loginMutation.mutateAsync({\n        email,\n        password\n      });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 注册函数\n  const register = async data => {\n    try {\n      await registerMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = '/';\n  };\n\n  // 更新用户信息函数\n  const updateUser = async data => {\n    try {\n      await updateUserMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 手动设置用户信息（用于OAuth登录）\n  const setUser = user => {\n    setCurrentUser(user);\n    if (user) {\n      queryClient.setQueryData(['currentUser'], {\n        data: user,\n        success: true\n      });\n    } else {\n      queryClient.removeQueries({\n        queryKey: ['currentUser']\n      });\n    }\n  };\n\n  // 手动设置令牌（用于OAuth登录）\n  const setToken = token => {\n    setCurrentToken(token);\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n    }\n  };\n  const value = {\n    user: currentUser || (userData === null || userData === void 0 ? void 0 : userData.data) || null,\n    token: currentToken || localStorage.getItem('token'),\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUser,\n    refetchUser,\n    setUser,\n    setToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 176,\n    columnNumber: 10\n  }, this);\n};\n\n// 使用认证hook\n_s(AuthProvider, \"Hg8pm2OgOMbFBstGPWEL6iq0ArM=\", false, function () {\n  return [useQueryClient, useQuery, useMutation, useMutation, useMutation];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth必须在AuthProvider中使用');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["useState","useEffect","createContext","useContext","useQuery","useMutation","useQueryClient","userService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","queryClient","isAuthenticated","setIsAuthenticated","currentUser","setCurrentUser","currentToken","setCurrentToken","data","userData","isLoading","refetch","refetchUser","queryKey","queryFn","getCurrentUser","enabled","localStorage","getItem","retry","loginMutation","mutationFn","email","password","login","onSuccess","success","invalidateQueries","registerMutation","register","updateUserMutation","updateUser","token","user","storedToken","mutateAsync","error","logout","removeItem","clear","window","location","href","setUser","setQueryData","removeQueries","setToken","setItem","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/project/trade/frontend/src/hooks/useAuth.tsx"],"sourcesContent":["import { useState, useEffect, createContext, useContext } from 'react';\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\nimport { User } from '../types';\nimport { userService } from '../services/api';\n\n// 认证上下文\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  isLoading: boolean;\n  isAuthenticated: boolean;\n  login: (email: string, password: string) => Promise<void>;\n  register: (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => Promise<void>;\n  logout: () => void;\n  updateUser: (data: Partial<User>) => Promise<void>;\n  refetchUser: () => void;\n  setUser: (user: User | null) => void;\n  setToken: (token: string | null) => void;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// 认证提供者组件\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const queryClient = useQueryClient();\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [currentToken, setCurrentToken] = useState<string | null>(null);\n\n  // 获取当前用户信息\n  const {\n    data: userData,\n    isLoading,\n    refetch: refetchUser\n  } = useQuery({\n    queryKey: ['currentUser'],\n    queryFn: () => userService.getCurrentUser(),\n    enabled: !!localStorage.getItem('token'),\n    retry: 1,\n  });\n\n  // 登录mutation\n  const loginMutation = useMutation({\n    mutationFn: ({ email, password }: { email: string; password: string }) =>\n      userService.login({ email, password }),\n    onSuccess: (data) => {\n      if (data.success) {\n        setIsAuthenticated(true);\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 注册mutation\n  const registerMutation = useMutation({\n    mutationFn: (data: {\n      username: string;\n      email: string;\n      phone: string;\n      password: string;\n      confirmPassword: string;\n    }) => userService.register(data),\n    onSuccess: (data) => {\n      if (data.success) {\n        queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n      }\n    },\n  });\n\n  // 更新用户信息mutation\n  const updateUserMutation = useMutation({\n    mutationFn: (data: Partial<User>) => userService.updateUser(data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['currentUser'] });\n    },\n  });\n\n  // 更新认证状态\n  useEffect(() => {\n    const token = currentToken || localStorage.getItem('token');\n    const user = currentUser || userData?.data;\n    setIsAuthenticated(!!token && !!user);\n  }, [userData, currentUser, currentToken]);\n\n  // 初始化时从localStorage获取token\n  useEffect(() => {\n    const storedToken = localStorage.getItem('token');\n    if (storedToken && !currentToken) {\n      setCurrentToken(storedToken);\n    }\n  }, [currentToken]);\n\n  // 登录函数\n  const login = async (email: string, password: string) => {\n    try {\n      await loginMutation.mutateAsync({ email, password });\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 注册函数\n  const register = async (data: {\n    username: string;\n    email: string;\n    phone: string;\n    password: string;\n    confirmPassword: string;\n  }) => {\n    try {\n      await registerMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 登出函数\n  const logout = () => {\n    localStorage.removeItem('token');\n    setIsAuthenticated(false);\n    queryClient.clear();\n    window.location.href = '/';\n  };\n\n  // 更新用户信息函数\n  const updateUser = async (data: Partial<User>) => {\n    try {\n      await updateUserMutation.mutateAsync(data);\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // 手动设置用户信息（用于OAuth登录）\n  const setUser = (user: User | null) => {\n    setCurrentUser(user);\n    if (user) {\n      queryClient.setQueryData(['currentUser'], { data: user, success: true });\n    } else {\n      queryClient.removeQueries({ queryKey: ['currentUser'] });\n    }\n  };\n\n  // 手动设置令牌（用于OAuth登录）\n  const setToken = (token: string | null) => {\n    setCurrentToken(token);\n    if (token) {\n      localStorage.setItem('token', token);\n      setIsAuthenticated(true);\n    } else {\n      localStorage.removeItem('token');\n      setIsAuthenticated(false);\n    }\n  };\n\n  const value: AuthContextType = {\n    user: currentUser || userData?.data || null,\n    token: currentToken || localStorage.getItem('token'),\n    isLoading,\n    isAuthenticated,\n    login,\n    register,\n    logout,\n    updateUser,\n    refetchUser,\n    setUser,\n    setToken,\n  };\n\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\n// 使用认证hook\nexport const useAuth = () => {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth必须在AuthProvider中使用');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}