# ==============================================
# 生产环境优化的 Dockerfile
# 多阶段构建，最小化镜像体积
# ==============================================

# 构建阶段
FROM node:18-alpine AS builder

# 设置工作目录
WORKDIR /app

# 复制包文件
COPY package*.json ./
COPY tsconfig.json ./

# 安装构建依赖
RUN npm ci --only=production --silent

# 复制源码
COPY src ./src
COPY prisma ./prisma

# 构建应用
RUN npm run build

# 生成 Prisma 客户端
RUN npx prisma generate

# 生产阶段
FROM node:18-alpine AS production

# 创建应用用户
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# 设置工作目录
WORKDIR /app

# 复制构建产物
COPY --from=builder --chown=nextjs:nodejs /app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /app/package*.json ./
COPY --from=builder --chown=nextjs:nodejs /app/prisma ./prisma

# 复制启动脚本
COPY --chown=nextjs:nodejs start-production.js ./

# 创建必要目录
RUN mkdir -p /app/logs /app/uploads && \
    chown -R nextjs:nodejs /app/logs /app/uploads

# 切换到应用用户
USER nextjs

# 暴露端口
EXPOSE 5000

# 健康检查
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:5000/api/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"

# 启动应用
CMD ["node", "start-production.js"]