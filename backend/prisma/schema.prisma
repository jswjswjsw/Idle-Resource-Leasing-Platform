// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id                String            @id @default(cuid())
  username          String            @unique
  email             String            @unique
  phone             String?           @unique
  password          String?           // OAuth用户可能没有密码
  avatar            String?
  creditScore       Int               @default(100)
  verified          Boolean           @default(false)
  isActive          Boolean           @default(true)
  lastLoginAt       DateTime?
  // OAuth相关字段
  isOAuthUser       Boolean           @default(false) // 是否为第三方登录用户
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  // 关联关系
  resources         Resource[]        @relation("UserResources")
  ordersAsRenter    Order[]           @relation("RenterOrders")
  ordersAsOwner     Order[]           @relation("OwnerOrders")
  reviewsGiven      Review[]          @relation("ReviewerReviews")
  reviewsReceived   Review[]          @relation("RevieweeReviews")
  messagesSent      Message[]         @relation("SenderMessages")
  messagesReceived  Message[]         @relation("ReceiverMessages")
  notifications     Notification[]
  paymentMethods    PaymentMethod[]
  addresses         Address[]
  userVerifications UserVerification[]
  favorites         Favorite[]
  oauthAccounts     OAuthAccount[]    // OAuth账户关联

  @@map("users")
}

// 用户验证表
model UserVerification {
  id              String             @id @default(cuid())
  userId          String
  verificationType String
  verifiedValue   String
  verified        Boolean            @default(false)
  verifiedAt      DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  user            User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, verificationType])
  @@map("user_verifications")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// VerificationType: PHONE, EMAIL, IDENTITY, ZHIMA_CREDIT

// 用户地址表
model Address {
  id        String   @id @default(cuid())
  userId    String
  label     String   // 地址标签：家、公司、学校等
  address   String
  latitude  Float?
  longitude Float?
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

// 资源分类表
model Category {
  id          String     @id @default(cuid())
  name        String     @unique
  nameEn      String?
  description String?
  icon        String?
  parentId    String?
  sortOrder   Int        @default(0)
  isActive    Boolean    @default(true)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  resources   Resource[]

  @@map("categories")
}

// 资源表
model Resource {
  id          String         @id @default(cuid())
  title       String
  description String
  categoryId  String
  price       Decimal
  priceUnit   String         @default("day")
  images      String         // JSON数组存储图片URL
  location    String
  latitude    Float
  longitude   Float
  status      String         @default("AVAILABLE")
  rating      Decimal        @default(0.0)
  reviewCount Int            @default(0)
  tags        String? // JSON数组存储标签
  ownerId     String
  deposit     Decimal        @default(0)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  // 关联关系
  owner       User           @relation("UserResources", fields: [ownerId], references: [id])
  category    Category       @relation(fields: [categoryId], references: [id])
  orders      Order[]
  reviews     Review[]
  favorites   Favorite[]

  @@map("resources")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// PriceUnit: HOUR, DAY, WEEK, MONTH
// ResourceStatus: AVAILABLE, RENTED, MAINTENANCE, UNAVAILABLE

// 订单表
model Order {
  id              String        @id @default(cuid())
  resourceId      String
  renterId        String
  ownerId         String
  startDate       DateTime
  endDate         DateTime
  totalPrice      Decimal
  deposit         Decimal
  status          String        @default("PENDING")
  paymentStatus   String        @default("PENDING")
  notes           String?
  deliveryMethod  String         @default("PICKUP")
  deliveryAddress String?
  deliveryFee     Decimal       @default(0)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // 关联关系
  resource        Resource      @relation(fields: [resourceId], references: [id])
  renter          User          @relation("RenterOrders", fields: [renterId], references: [id])
  owner           User          @relation("OwnerOrders", fields: [ownerId], references: [id])
  payments        Payment[]
  messages        Message[]
  reviews         Review[]

  @@map("orders")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// OrderStatus: PENDING, CONFIRMED, ACTIVE, COMPLETED, CANCELLED, DISPUTED
// PaymentStatus: PENDING, PAID, REFUNDED, FAILED
// DeliveryMethod: PICKUP, DELIVERY, EXPRESS

// 支付记录表
model Payment {
  id             String        @id @default(cuid())
  orderId        String
  amount         Decimal
  currency       String        @default("CNY")
  paymentMethod  String
  paymentGateway String
  transactionId  String?       @unique
  status         String        @default("PENDING")
  paidAt         DateTime?
  refundedAt     DateTime?
  refundAmount   Decimal?
  refundReason   String?
  metadata       String?       // JSON存储额外信息
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  order          Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// PaymentMethodType: ALIPAY, WECHAT, UNIONPAY, BALANCE

// 用户支付方式表
model PaymentMethod {
  id         String            @id @default(cuid())
  userId     String
  type       String
  name       String
  isDefault  Boolean           @default(false)
  details    String            // JSON存储支付配置
  isValid    Boolean           @default(true)
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt

  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

// 评价表
model Review {
  id         String   @id @default(cuid())
  orderId    String   @unique
  reviewerId String
  revieweeId String
  resourceId String
  rating     Int
  comment    String?
  images     String?  // JSON数组存储图片URL
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  reviewer   User     @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  reviewee   User     @relation("RevieweeReviews", fields: [revieweeId], references: [id])
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// 收藏表
model Favorite {
  id         String   @id @default(cuid())
  userId     String
  resourceId String
  createdAt  DateTime @default(now())

  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  resource   Resource @relation(fields: [resourceId], references: [id], onDelete: Cascade)

  @@unique([userId, resourceId])
  @@map("favorites")
}

// 消息表
model Message {
  id         String   @id @default(cuid())
  orderId    String
  senderId   String
  receiverId String
  content    String
  type       String      @default("TEXT")
  isRead     Boolean  @default(false)
  metadata   String?  // JSON存储额外信息
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  sender     User     @relation("SenderMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceiverMessages", fields: [receiverId], references: [id])

  @@map("messages")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// MessageType: TEXT, IMAGE, FILE, LOCATION, SYSTEM

// 通知表
model Notification {
  id        String           @id @default(cuid())
  userId    String
  title     String
  message   String
  type      String
  isRead    Boolean          @default(false)
  actionUrl String?
  data      String?          // JSON存储额外数据
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// NotificationType: ORDER, MESSAGE, SYSTEM, PROMOTION, PAYMENT, REVIEW

// OAuth账户表 - 管理第三方登录账户
model OAuthAccount {
  id            String        @id @default(cuid())
  userId        String        // 关联的用户ID
  provider      String        // OAuth提供商
  providerId    String        // 第三方平台的用户ID
  providerEmail String?       // 第三方平台的邮箱
  displayName   String?       // 第三方平台的显示名称
  avatar        String?       // 第三方平台的头像
  accessToken   String?       // 访问令牌（加密存储）
  refreshToken  String?       // 刷新令牌（加密存储）
  expiresAt     DateTime?     // 令牌过期时间
  scope         String?       // 授权范围
  metadata      String?       // 额外的OAuth数据（JSON格式）
  isActive      Boolean       @default(true) // 账户是否激活
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  // 关联关系
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  // 确保同一用户在同一平台只能有一个账户
  @@unique([userId, provider])
  // 确保同一平台的用户ID唯一
  @@unique([provider, providerId])
  @@map("oauth_accounts")
}

// 注意：SQLite不支持枚举，以下为字符串常量参考
// OAuthProvider: WECHAT, QQ, WEIBO, ALIPAY, GOOGLE, GITHUB

// 系统配置表
model SystemConfig {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  type      String   @default("string")
  isPublic  Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("system_configs")
}