{"ast":null,"code":"import axios from 'axios';\n// API配置\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器 - 添加认证token\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    // 清除本地存储的token\n    localStorage.removeItem('token');\n    // 重定向到登录页面\n    window.location.href = '/auth';\n  }\n  return Promise.reject(error);\n});\n\n/**\n * 用户相关API服务\n */\nexport const userService = {\n  // 用户注册\n  register: async data => {\n    const response = await api.post('/auth/register', data);\n    return response.data;\n  },\n  // 用户登录\n  login: async data => {\n    const response = await api.post('/auth/login', data);\n    if (response.data.success) {\n      localStorage.setItem('token', response.data.data.token);\n    }\n    return response.data;\n  },\n  // 获取当前用户信息\n  getCurrentUser: async () => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n  // 更新用户信息\n  updateUser: async data => {\n    const response = await api.put('/users/me', data);\n    return response.data;\n  },\n  // 上传用户头像\n  uploadAvatar: async file => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/users/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // 获取用户信誉分数\n  getCreditScore: async userId => {\n    const response = await api.get(`/users/${userId}/credit-score`);\n    return response.data;\n  }\n};\n\n/**\n * 资源相关API服务\n */\nexport const resourceService = {\n  // 获取资源列表\n  getResources: async (filters, page = 1, limit = 20) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          if (typeof value === 'object') {\n            params.append(key, JSON.stringify(value));\n          } else {\n            params.append(key, String(value));\n          }\n        }\n      });\n    }\n    const response = await api.get(`/resources?${params.toString()}`);\n    return response.data;\n  },\n  // 获取单个资源详情\n  getResource: async id => {\n    const response = await api.get(`/resources/${id}`);\n    return response.data;\n  },\n  // 创建新资源\n  createResource: async data => {\n    const response = await api.post('/resources', data);\n    return response.data;\n  },\n  // 更新资源信息\n  updateResource: async (id, data) => {\n    const response = await api.put(`/resources/${id}`, data);\n    return response.data;\n  },\n  // 删除资源\n  deleteResource: async id => {\n    const response = await api.delete(`/resources/${id}`);\n    return response.data;\n  },\n  // 获取用户发布的资源\n  getUserResources: async (userId, page = 1, limit = 20) => {\n    const response = await api.get(`/users/${userId}/resources?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  // 搜索资源\n  searchResources: async (keyword, filters, page = 1, limit = 20) => {\n    const params = new URLSearchParams({\n      keyword,\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, String(value));\n        }\n      });\n    }\n    const response = await api.get(`/resources/search?${params.toString()}`);\n    return response.data;\n  },\n  // 获取热门资源\n  getPopularResources: async (limit = 10) => {\n    const response = await api.get(`/resources/popular?limit=${limit}`);\n    return response.data;\n  },\n  // 获取推荐资源\n  getRecommendedResources: async (limit = 10) => {\n    const response = await api.get(`/resources/recommended?limit=${limit}`);\n    return response.data;\n  }\n};\n\n/**\n * 订单相关API服务\n */\nexport const orderService = {\n  // 创建订单\n  createOrder: async data => {\n    const response = await api.post('/orders', data);\n    return response.data;\n  },\n  // 获取订单列表\n  getOrders: async (status, page = 1, limit = 20) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (status) {\n      params.append('status', status);\n    }\n    const response = await api.get(`/orders?${params.toString()}`);\n    return response.data;\n  },\n  // 获取单个订单详情\n  getOrder: async id => {\n    const response = await api.get(`/orders/${id}`);\n    return response.data;\n  },\n  // 更新订单状态\n  updateOrderStatus: async (id, data) => {\n    const response = await api.patch(`/orders/${id}/status`, data);\n    return response.data;\n  },\n  // 获取用户订单\n  getUserOrders: async (userId, status, page = 1, limit = 20) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString()\n    });\n    if (status) {\n      params.append('status', status);\n    }\n    const response = await api.get(`/users/${userId}/orders?${params.toString()}`);\n    return response.data;\n  },\n  // 取消订单\n  cancelOrder: async (orderId, reason) => {\n    const response = await api.patch(`/orders/${orderId}/cancel`, {\n      reason\n    });\n    return response.data;\n  },\n  // 确认订单\n  confirmOrder: async orderId => {\n    const response = await api.patch(`/orders/${orderId}/confirm`);\n    return response.data;\n  },\n  // 完成订单\n  completeOrder: async orderId => {\n    const response = await api.patch(`/orders/${orderId}/complete`);\n    return response.data;\n  }\n};\n\n/**\n * 聊天相关API服务\n */\nexport const chatService = {\n  // 获取订单聊天记录\n  getChatMessages: async orderId => {\n    const response = await api.get(`/orders/${orderId}/messages`);\n    return response.data;\n  },\n  // 发送聊天消息\n  sendMessage: async data => {\n    const response = await api.post('/messages', data);\n    return response.data;\n  },\n  // 标记消息为已读\n  markAsRead: async messageId => {\n    const response = await api.patch(`/messages/${messageId}/read`);\n    return response.data;\n  },\n  // 获取未读消息数量\n  getUnreadCount: async () => {\n    const response = await api.get('/messages/unread-count');\n    return response.data;\n  }\n};\n\n/**\n * 通知相关API服务\n */\nexport const notificationService = {\n  // 获取通知列表\n  getNotifications: async (page = 1, limit = 20) => {\n    const response = await api.get(`/notifications?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n  // 标记通知为已读\n  markAsRead: async notificationId => {\n    const response = await api.patch(`/notifications/${notificationId}/read`);\n    return response.data;\n  },\n  // 标记所有通知为已读\n  markAllAsRead: async () => {\n    const response = await api.patch('/notifications/mark-all-read');\n    return response.data;\n  },\n  // 获取未读通知数量\n  getUnreadCount: async () => {\n    const response = await api.get('/notifications/unread-count');\n    return response.data;\n  }\n};\n\n/**\n * 支付相关API服务\n */\nexport const paymentService = {\n  // 创建支付订单\n  createPayment: async data => {\n    const response = await api.post('/payments/create', data);\n    return response.data;\n  },\n  // 查询支付状态\n  getPaymentStatus: async paymentId => {\n    const response = await api.get(`/payments/${paymentId}/status`);\n    return response.data;\n  },\n  // 申请退款\n  requestRefund: async (orderId, reason) => {\n    const response = await api.post('/payments/refund', {\n      orderId,\n      reason\n    });\n    return response.data;\n  },\n  // 获取支付配置\n  getPaymentConfig: async () => {\n    const response = await api.get('/payments/config');\n    return response.data;\n  }\n};\n\n/**\n * 文件上传相关API服务\n */\nexport const fileService = {\n  // 上传文件\n  uploadFile: async data => {\n    const formData = new FormData();\n    formData.append('file', data.file);\n    formData.append('type', data.type);\n    formData.append('purpose', data.purpose);\n    const response = await api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // 上传多个文件\n  uploadMultipleFiles: async (files, type, purpose) => {\n    const formData = new FormData();\n    files.forEach(file => {\n      formData.append('files', file);\n    });\n    formData.append('type', type);\n    formData.append('purpose', purpose);\n    const response = await api.post('/files/upload-multiple', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  // 删除文件\n  deleteFile: async fileUrl => {\n    const response = await api.delete('/files', {\n      data: {\n        fileUrl\n      }\n    });\n    return response.data;\n  }\n};\n\n/**\n * 地理位置相关API服务\n */\nexport const locationService = {\n  // 获取当前位置\n  getCurrentLocation: async () => {\n    const response = await api.get('/location/current');\n    return response.data;\n  },\n  // 地址解析\n  geocodeAddress: async address => {\n    const response = await api.get(`/location/geocode?address=${encodeURIComponent(address)}`);\n    return response.data;\n  },\n  // 逆地理编码\n  reverseGeocode: async (lat, lng) => {\n    const response = await api.get(`/location/reverse-geocode?lat=${lat}&lng=${lng}`);\n    return response.data;\n  }\n};\n\n/**\n * 工具函数\n */\nexport const apiUtils = {\n  // 清除token\n  clearToken: () => {\n    localStorage.removeItem('token');\n  },\n  // 检查是否已登录\n  isAuthenticated: () => {\n    return !!localStorage.getItem('token');\n  },\n  // 获取token\n  getToken: () => {\n    return localStorage.getItem('token');\n  },\n  // 设置token\n  setToken: token => {\n    localStorage.setItem('token', token);\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","response","_error$response","status","removeItem","window","location","href","userService","register","data","post","login","success","setItem","getCurrentUser","get","updateUser","put","uploadAvatar","file","formData","FormData","append","getCreditScore","userId","resourceService","getResources","filters","page","limit","params","URLSearchParams","toString","Object","entries","forEach","key","value","undefined","JSON","stringify","String","getResource","id","createResource","updateResource","deleteResource","delete","getUserResources","searchResources","keyword","getPopularResources","getRecommendedResources","orderService","createOrder","getOrders","getOrder","updateOrderStatus","patch","getUserOrders","cancelOrder","orderId","reason","confirmOrder","completeOrder","chatService","getChatMessages","sendMessage","markAsRead","messageId","getUnreadCount","notificationService","getNotifications","notificationId","markAllAsRead","paymentService","createPayment","getPaymentStatus","paymentId","requestRefund","getPaymentConfig","fileService","uploadFile","type","purpose","uploadMultipleFiles","files","deleteFile","fileUrl","locationService","getCurrentLocation","geocodeAddress","address","encodeURIComponent","reverseGeocode","lat","lng","apiUtils","clearToken","isAuthenticated","getToken","setToken"],"sources":["D:/project/trade/frontend/src/services/api.ts"],"sourcesContent":["import axios from 'axios';\nimport {\n  User,\n  RegisterRequest,\n  LoginRequest,\n  UpdateUserRequest,\n  Resource,\n  CreateResourceRequest,\n  UpdateResourceRequest,\n  Order,\n  CreateOrderRequest,\n  UpdateOrderStatusRequest,\n  ChatMessage,\n  CreateChatMessageRequest,\n  Notification,\n  ApiResponse,\n  PaginatedResponse,\n  SearchFilters,\n  PaymentRequest,\n  PaymentResult,\n  FileUploadResult,\n  FileUploadRequest,\n  Location\n} from '../types';\n\n// API配置\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:3002/api';\n\n// 创建axios实例\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 请求拦截器 - 添加认证token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// 响应拦截器 - 处理错误\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      // 清除本地存储的token\n      localStorage.removeItem('token');\n      // 重定向到登录页面\n      window.location.href = '/auth';\n    }\n    return Promise.reject(error);\n  }\n);\n\n/**\n * 用户相关API服务\n */\nexport const userService = {\n  // 用户注册\n  register: async (data: RegisterRequest): Promise<ApiResponse<User>> => {\n    const response = await api.post('/auth/register', data);\n    return response.data;\n  },\n\n  // 用户登录\n  login: async (data: LoginRequest): Promise<ApiResponse<{ user: User; token: string }>> => {\n    const response = await api.post('/auth/login', data);\n    if (response.data.success) {\n      localStorage.setItem('token', response.data.data.token);\n    }\n    return response.data;\n  },\n\n  // 获取当前用户信息\n  getCurrentUser: async (): Promise<ApiResponse<User>> => {\n    const response = await api.get('/users/me');\n    return response.data;\n  },\n\n  // 更新用户信息\n  updateUser: async (data: UpdateUserRequest): Promise<ApiResponse<User>> => {\n    const response = await api.put('/users/me', data);\n    return response.data;\n  },\n\n  // 上传用户头像\n  uploadAvatar: async (file: File): Promise<ApiResponse<string>> => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post('/users/avatar', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // 获取用户信誉分数\n  getCreditScore: async (userId: string): Promise<ApiResponse<number>> => {\n    const response = await api.get(`/users/${userId}/credit-score`);\n    return response.data;\n  },\n};\n\n/**\n * 资源相关API服务\n */\nexport const resourceService = {\n  // 获取资源列表\n  getResources: async (\n    filters?: SearchFilters,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<ApiResponse<PaginatedResponse<Resource>>> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          if (typeof value === 'object') {\n            params.append(key, JSON.stringify(value));\n          } else {\n            params.append(key, String(value));\n          }\n        }\n      });\n    }\n\n    const response = await api.get(`/resources?${params.toString()}`);\n    return response.data;\n  },\n\n  // 获取单个资源详情\n  getResource: async (id: string): Promise<ApiResponse<Resource>> => {\n    const response = await api.get(`/resources/${id}`);\n    return response.data;\n  },\n\n  // 创建新资源\n  createResource: async (data: CreateResourceRequest): Promise<ApiResponse<Resource>> => {\n    const response = await api.post('/resources', data);\n    return response.data;\n  },\n\n  // 更新资源信息\n  updateResource: async (id: string, data: UpdateResourceRequest): Promise<ApiResponse<Resource>> => {\n    const response = await api.put(`/resources/${id}`, data);\n    return response.data;\n  },\n\n  // 删除资源\n  deleteResource: async (id: string): Promise<ApiResponse<void>> => {\n    const response = await api.delete(`/resources/${id}`);\n    return response.data;\n  },\n\n  // 获取用户发布的资源\n  getUserResources: async (userId: string, page: number = 1, limit: number = 20) => {\n    const response = await api.get(`/users/${userId}/resources?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // 搜索资源\n  searchResources: async (\n    keyword: string,\n    filters?: SearchFilters,\n    page: number = 1,\n    limit: number = 20\n  ) => {\n    const params = new URLSearchParams({\n      keyword,\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (filters) {\n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined) {\n          params.append(key, String(value));\n        }\n      });\n    }\n\n    const response = await api.get(`/resources/search?${params.toString()}`);\n    return response.data;\n  },\n\n  // 获取热门资源\n  getPopularResources: async (limit: number = 10) => {\n    const response = await api.get(`/resources/popular?limit=${limit}`);\n    return response.data;\n  },\n\n  // 获取推荐资源\n  getRecommendedResources: async (limit: number = 10) => {\n    const response = await api.get(`/resources/recommended?limit=${limit}`);\n    return response.data;\n  },\n};\n\n/**\n * 订单相关API服务\n */\nexport const orderService = {\n  // 创建订单\n  createOrder: async (data: CreateOrderRequest): Promise<ApiResponse<Order>> => {\n    const response = await api.post('/orders', data);\n    return response.data;\n  },\n\n  // 获取订单列表\n  getOrders: async (\n    status?: string,\n    page: number = 1,\n    limit: number = 20\n  ): Promise<ApiResponse<PaginatedResponse<Order>>> => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (status) {\n      params.append('status', status);\n    }\n\n    const response = await api.get(`/orders?${params.toString()}`);\n    return response.data;\n  },\n\n  // 获取单个订单详情\n  getOrder: async (id: string): Promise<ApiResponse<Order>> => {\n    const response = await api.get(`/orders/${id}`);\n    return response.data;\n  },\n\n  // 更新订单状态\n  updateOrderStatus: async (id: string, data: UpdateOrderStatusRequest): Promise<ApiResponse<Order>> => {\n    const response = await api.patch(`/orders/${id}/status`, data);\n    return response.data;\n  },\n\n  // 获取用户订单\n  getUserOrders: async (\n    userId: string,\n    status?: string,\n    page: number = 1,\n    limit: number = 20\n  ) => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      limit: limit.toString(),\n    });\n\n    if (status) {\n      params.append('status', status);\n    }\n\n    const response = await api.get(`/users/${userId}/orders?${params.toString()}`);\n    return response.data;\n  },\n\n  // 取消订单\n  cancelOrder: async (orderId: string, reason?: string): Promise<ApiResponse<Order>> => {\n    const response = await api.patch(`/orders/${orderId}/cancel`, { reason });\n    return response.data;\n  },\n\n  // 确认订单\n  confirmOrder: async (orderId: string): Promise<ApiResponse<Order>> => {\n    const response = await api.patch(`/orders/${orderId}/confirm`);\n    return response.data;\n  },\n\n  // 完成订单\n  completeOrder: async (orderId: string): Promise<ApiResponse<Order>> => {\n    const response = await api.patch(`/orders/${orderId}/complete`);\n    return response.data;\n  },\n};\n\n/**\n * 聊天相关API服务\n */\nexport const chatService = {\n  // 获取订单聊天记录\n  getChatMessages: async (orderId: string): Promise<ApiResponse<ChatMessage[]>> => {\n    const response = await api.get(`/orders/${orderId}/messages`);\n    return response.data;\n  },\n\n  // 发送聊天消息\n  sendMessage: async (data: CreateChatMessageRequest): Promise<ApiResponse<ChatMessage>> => {\n    const response = await api.post('/messages', data);\n    return response.data;\n  },\n\n  // 标记消息为已读\n  markAsRead: async (messageId: string): Promise<ApiResponse<void>> => {\n    const response = await api.patch(`/messages/${messageId}/read`);\n    return response.data;\n  },\n\n  // 获取未读消息数量\n  getUnreadCount: async (): Promise<ApiResponse<number>> => {\n    const response = await api.get('/messages/unread-count');\n    return response.data;\n  },\n};\n\n/**\n * 通知相关API服务\n */\nexport const notificationService = {\n  // 获取通知列表\n  getNotifications: async (page: number = 1, limit: number = 20) => {\n    const response = await api.get(`/notifications?page=${page}&limit=${limit}`);\n    return response.data;\n  },\n\n  // 标记通知为已读\n  markAsRead: async (notificationId: string) => {\n    const response = await api.patch(`/notifications/${notificationId}/read`);\n    return response.data;\n  },\n\n  // 标记所有通知为已读\n  markAllAsRead: async () => {\n    const response = await api.patch('/notifications/mark-all-read');\n    return response.data;\n  },\n\n  // 获取未读通知数量\n  getUnreadCount: async () => {\n    const response = await api.get('/notifications/unread-count');\n    return response.data;\n  },\n};\n\n/**\n * 支付相关API服务\n */\nexport const paymentService = {\n  // 创建支付订单\n  createPayment: async (data: PaymentRequest): Promise<ApiResponse<PaymentResult>> => {\n    const response = await api.post('/payments/create', data);\n    return response.data;\n  },\n\n  // 查询支付状态\n  getPaymentStatus: async (paymentId: string): Promise<ApiResponse<PaymentResult>> => {\n    const response = await api.get(`/payments/${paymentId}/status`);\n    return response.data;\n  },\n\n  // 申请退款\n  requestRefund: async (orderId: string, reason: string) => {\n    const response = await api.post('/payments/refund', { orderId, reason });\n    return response.data;\n  },\n\n  // 获取支付配置\n  getPaymentConfig: async () => {\n    const response = await api.get('/payments/config');\n    return response.data;\n  },\n};\n\n/**\n * 文件上传相关API服务\n */\nexport const fileService = {\n  // 上传文件\n  uploadFile: async (data: FileUploadRequest): Promise<ApiResponse<FileUploadResult>> => {\n    const formData = new FormData();\n    formData.append('file', data.file);\n    formData.append('type', data.type);\n    formData.append('purpose', data.purpose);\n\n    const response = await api.post('/files/upload', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // 上传多个文件\n  uploadMultipleFiles: async (\n    files: File[],\n    type: 'image' | 'video' | 'document',\n    purpose: 'resource' | 'user' | 'review'\n  ): Promise<ApiResponse<FileUploadResult[]>> => {\n    const formData = new FormData();\n    files.forEach((file) => {\n      formData.append('files', file);\n    });\n    formData.append('type', type);\n    formData.append('purpose', purpose);\n\n    const response = await api.post('/files/upload-multiple', formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n    });\n    return response.data;\n  },\n\n  // 删除文件\n  deleteFile: async (fileUrl: string): Promise<ApiResponse<void>> => {\n    const response = await api.delete('/files', { data: { fileUrl } });\n    return response.data;\n  },\n};\n\n/**\n * 地理位置相关API服务\n */\nexport const locationService = {\n  // 获取当前位置\n  getCurrentLocation: async (): Promise<ApiResponse<Location>> => {\n    const response = await api.get('/location/current');\n    return response.data;\n  },\n\n  // 地址解析\n  geocodeAddress: async (address: string): Promise<ApiResponse<Location[]>> => {\n    const response = await api.get(`/location/geocode?address=${encodeURIComponent(address)}`);\n    return response.data;\n  },\n\n  // 逆地理编码\n  reverseGeocode: async (lat: number, lng: number): Promise<ApiResponse<Location>> => {\n    const response = await api.get(`/location/reverse-geocode?lat=${lat}&lng=${lng}`);\n    return response.data;\n  },\n};\n\n/**\n * 工具函数\n */\nexport const apiUtils = {\n  // 清除token\n  clearToken: () => {\n    localStorage.removeItem('token');\n  },\n\n  // 检查是否已登录\n  isAuthenticated: (): boolean => {\n    return !!localStorage.getItem('token');\n  },\n\n  // 获取token\n  getToken: (): string | null => {\n    return localStorage.getItem('token');\n  },\n\n  // 设置token\n  setToken: (token: string) => {\n    localStorage.setItem('token', token);\n  },\n};\n\nexport default api;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}